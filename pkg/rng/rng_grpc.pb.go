// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: pkg/rng/rng.proto

package rng

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RNGClient is the client API for RNG service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RNGClient interface {
	Rand(ctx context.Context, in *RandRequest, opts ...grpc.CallOption) (*RandResponse, error)
	RandFloat(ctx context.Context, in *RandRequestFloat, opts ...grpc.CallOption) (*RandResponseFloat, error)
	HealthCheck(ctx context.Context, opts ...grpc.CallOption) (RNG_HealthCheckClient, error)
}

type rNGClient struct {
	cc grpc.ClientConnInterface
}

func NewRNGClient(cc grpc.ClientConnInterface) RNGClient {
	return &rNGClient{cc}
}

func (c *rNGClient) Rand(ctx context.Context, in *RandRequest, opts ...grpc.CallOption) (*RandResponse, error) {
	out := new(RandResponse)
	err := c.cc.Invoke(ctx, "/RNG/Rand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rNGClient) RandFloat(ctx context.Context, in *RandRequestFloat, opts ...grpc.CallOption) (*RandResponseFloat, error) {
	out := new(RandResponseFloat)
	err := c.cc.Invoke(ctx, "/RNG/RandFloat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rNGClient) HealthCheck(ctx context.Context, opts ...grpc.CallOption) (RNG_HealthCheckClient, error) {
	stream, err := c.cc.NewStream(ctx, &RNG_ServiceDesc.Streams[0], "/RNG/HealthCheck", opts...)
	if err != nil {
		return nil, err
	}
	x := &rNGHealthCheckClient{stream}
	return x, nil
}

type RNG_HealthCheckClient interface {
	Send(*Status) error
	Recv() (*Status, error)
	grpc.ClientStream
}

type rNGHealthCheckClient struct {
	grpc.ClientStream
}

func (x *rNGHealthCheckClient) Send(m *Status) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rNGHealthCheckClient) Recv() (*Status, error) {
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RNGServer is the server API for RNG service.
// All implementations must embed UnimplementedRNGServer
// for forward compatibility
type RNGServer interface {
	Rand(context.Context, *RandRequest) (*RandResponse, error)
	RandFloat(context.Context, *RandRequestFloat) (*RandResponseFloat, error)
	HealthCheck(RNG_HealthCheckServer) error
	mustEmbedUnimplementedRNGServer()
}

// UnimplementedRNGServer must be embedded to have forward compatible implementations.
type UnimplementedRNGServer struct {
}

func (UnimplementedRNGServer) Rand(context.Context, *RandRequest) (*RandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rand not implemented")
}
func (UnimplementedRNGServer) RandFloat(context.Context, *RandRequestFloat) (*RandResponseFloat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandFloat not implemented")
}
func (UnimplementedRNGServer) HealthCheck(RNG_HealthCheckServer) error {
	return status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedRNGServer) mustEmbedUnimplementedRNGServer() {}

// UnsafeRNGServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RNGServer will
// result in compilation errors.
type UnsafeRNGServer interface {
	mustEmbedUnimplementedRNGServer()
}

func RegisterRNGServer(s grpc.ServiceRegistrar, srv RNGServer) {
	s.RegisterService(&RNG_ServiceDesc, srv)
}

func _RNG_Rand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RNGServer).Rand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RNG/Rand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RNGServer).Rand(ctx, req.(*RandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RNG_RandFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandRequestFloat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RNGServer).RandFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RNG/RandFloat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RNGServer).RandFloat(ctx, req.(*RandRequestFloat))
	}
	return interceptor(ctx, in, info, handler)
}

func _RNG_HealthCheck_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RNGServer).HealthCheck(&rNGHealthCheckServer{stream})
}

type RNG_HealthCheckServer interface {
	Send(*Status) error
	Recv() (*Status, error)
	grpc.ServerStream
}

type rNGHealthCheckServer struct {
	grpc.ServerStream
}

func (x *rNGHealthCheckServer) Send(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rNGHealthCheckServer) Recv() (*Status, error) {
	m := new(Status)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RNG_ServiceDesc is the grpc.ServiceDesc for RNG service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RNG_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RNG",
	HandlerType: (*RNGServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Rand",
			Handler:    _RNG_Rand_Handler,
		},
		{
			MethodName: "RandFloat",
			Handler:    _RNG_RandFloat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HealthCheck",
			Handler:       _RNG_HealthCheck_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/rng/rng.proto",
}
