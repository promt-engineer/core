// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: pkg/history/history.proto

package history

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetSessionIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId       string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Games           []string `protobuf:"bytes,2,rep,name=games,proto3" json:"games,omitempty"`
	ConvertCurrency string   `protobuf:"bytes,3,opt,name=convertCurrency,proto3" json:"convertCurrency,omitempty"`
}

func (x *GetSessionIn) Reset() {
	*x = GetSessionIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionIn) ProtoMessage() {}

func (x *GetSessionIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionIn.ProtoReflect.Descriptor instead.
func (*GetSessionIn) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{0}
}

func (x *GetSessionIn) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GetSessionIn) GetGames() []string {
	if x != nil {
		return x.Games
	}
	return nil
}

func (x *GetSessionIn) GetConvertCurrency() string {
	if x != nil {
		return x.ConvertCurrency
	}
	return ""
}

type GetAggregatedReportFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConvertCurrency string                 `protobuf:"bytes,1,opt,name=convertCurrency,proto3" json:"convertCurrency,omitempty"`
	Games           []string               `protobuf:"bytes,2,rep,name=games,proto3" json:"games,omitempty"`
	Integrator      string                 `protobuf:"bytes,3,opt,name=integrator,proto3" json:"integrator,omitempty"`
	Operator        string                 `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
	StartingFrom    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=starting_from,json=startingFrom,proto3,oneof" json:"starting_from,omitempty"`
	EndingAt        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=ending_at,json=endingAt,proto3,oneof" json:"ending_at,omitempty"`
	IsPfr           *bool                  `protobuf:"varint,7,opt,name=is_pfr,json=isPfr,proto3,oneof" json:"is_pfr,omitempty"`
	IsDemo          *bool                  `protobuf:"varint,8,opt,name=is_demo,json=isDemo,proto3,oneof" json:"is_demo,omitempty"`
}

func (x *GetAggregatedReportFilters) Reset() {
	*x = GetAggregatedReportFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregatedReportFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregatedReportFilters) ProtoMessage() {}

func (x *GetAggregatedReportFilters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregatedReportFilters.ProtoReflect.Descriptor instead.
func (*GetAggregatedReportFilters) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{1}
}

func (x *GetAggregatedReportFilters) GetConvertCurrency() string {
	if x != nil {
		return x.ConvertCurrency
	}
	return ""
}

func (x *GetAggregatedReportFilters) GetGames() []string {
	if x != nil {
		return x.Games
	}
	return nil
}

func (x *GetAggregatedReportFilters) GetIntegrator() string {
	if x != nil {
		return x.Integrator
	}
	return ""
}

func (x *GetAggregatedReportFilters) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *GetAggregatedReportFilters) GetStartingFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.StartingFrom
	}
	return nil
}

func (x *GetAggregatedReportFilters) GetEndingAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndingAt
	}
	return nil
}

func (x *GetAggregatedReportFilters) GetIsPfr() bool {
	if x != nil && x.IsPfr != nil {
		return *x.IsPfr
	}
	return false
}

func (x *GetAggregatedReportFilters) GetIsDemo() bool {
	if x != nil && x.IsDemo != nil {
		return *x.IsDemo
	}
	return false
}

type GetAggregatedReportByGameOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*GetAggregatedReportByGameItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetAggregatedReportByGameOut) Reset() {
	*x = GetAggregatedReportByGameOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregatedReportByGameOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregatedReportByGameOut) ProtoMessage() {}

func (x *GetAggregatedReportByGameOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregatedReportByGameOut.ProtoReflect.Descriptor instead.
func (*GetAggregatedReportByGameOut) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{2}
}

func (x *GetAggregatedReportByGameOut) GetItems() []*GetAggregatedReportByGameItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetAggregatedReportByCountryOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*GetAggregatedReportByCountryItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetAggregatedReportByCountryOut) Reset() {
	*x = GetAggregatedReportByCountryOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregatedReportByCountryOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregatedReportByCountryOut) ProtoMessage() {}

func (x *GetAggregatedReportByCountryOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregatedReportByCountryOut.ProtoReflect.Descriptor instead.
func (*GetAggregatedReportByCountryOut) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{3}
}

func (x *GetAggregatedReportByCountryOut) GetItems() []*GetAggregatedReportByCountryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetAggregatedReportByGameItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Game       string  `protobuf:"bytes,1,opt,name=game,proto3" json:"game,omitempty"`
	GameId     string  `protobuf:"bytes,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Currency   string  `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	UserCount  int64   `protobuf:"varint,4,opt,name=user_count,json=userCount,proto3" json:"user_count,omitempty"`
	RoundCount int64   `protobuf:"varint,5,opt,name=round_count,json=roundCount,proto3" json:"round_count,omitempty"`
	Wager      float64 `protobuf:"fixed64,6,opt,name=wager,proto3" json:"wager,omitempty"`
	Award      float64 `protobuf:"fixed64,7,opt,name=award,proto3" json:"award,omitempty"`
}

func (x *GetAggregatedReportByGameItem) Reset() {
	*x = GetAggregatedReportByGameItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregatedReportByGameItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregatedReportByGameItem) ProtoMessage() {}

func (x *GetAggregatedReportByGameItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregatedReportByGameItem.ProtoReflect.Descriptor instead.
func (*GetAggregatedReportByGameItem) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{4}
}

func (x *GetAggregatedReportByGameItem) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

func (x *GetAggregatedReportByGameItem) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *GetAggregatedReportByGameItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *GetAggregatedReportByGameItem) GetUserCount() int64 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

func (x *GetAggregatedReportByGameItem) GetRoundCount() int64 {
	if x != nil {
		return x.RoundCount
	}
	return 0
}

func (x *GetAggregatedReportByGameItem) GetWager() float64 {
	if x != nil {
		return x.Wager
	}
	return 0
}

func (x *GetAggregatedReportByGameItem) GetAward() float64 {
	if x != nil {
		return x.Award
	}
	return 0
}

type GetAggregatedReportByCountryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country    string  `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Currency   string  `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	UserCount  int64   `protobuf:"varint,3,opt,name=user_count,json=userCount,proto3" json:"user_count,omitempty"`
	RoundCount int64   `protobuf:"varint,4,opt,name=round_count,json=roundCount,proto3" json:"round_count,omitempty"`
	Wager      float64 `protobuf:"fixed64,5,opt,name=wager,proto3" json:"wager,omitempty"`
	Award      float64 `protobuf:"fixed64,6,opt,name=award,proto3" json:"award,omitempty"`
}

func (x *GetAggregatedReportByCountryItem) Reset() {
	*x = GetAggregatedReportByCountryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregatedReportByCountryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregatedReportByCountryItem) ProtoMessage() {}

func (x *GetAggregatedReportByCountryItem) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregatedReportByCountryItem.ProtoReflect.Descriptor instead.
func (*GetAggregatedReportByCountryItem) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{5}
}

func (x *GetAggregatedReportByCountryItem) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GetAggregatedReportByCountryItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *GetAggregatedReportByCountryItem) GetUserCount() int64 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

func (x *GetAggregatedReportByCountryItem) GetRoundCount() int64 {
	if x != nil {
		return x.RoundCount
	}
	return 0
}

func (x *GetAggregatedReportByCountryItem) GetWager() float64 {
	if x != nil {
		return x.Wager
	}
	return 0
}

func (x *GetAggregatedReportByCountryItem) GetAward() float64 {
	if x != nil {
		return x.Award
	}
	return 0
}

type FinancialReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Award           uint64 `protobuf:"varint,1,opt,name=award,proto3" json:"award,omitempty"`
	AwardWithoutPfr uint64 `protobuf:"varint,2,opt,name=award_without_pfr,json=awardWithoutPfr,proto3" json:"award_without_pfr,omitempty"`
	Wager           uint64 `protobuf:"varint,3,opt,name=wager,proto3" json:"wager,omitempty"`
	WagerWithoutPfr uint64 `protobuf:"varint,4,opt,name=wager_without_pfr,json=wagerWithoutPfr,proto3" json:"wager_without_pfr,omitempty"`
	SpinQuantity    int64  `protobuf:"varint,5,opt,name=spin_quantity,json=spinQuantity,proto3" json:"spin_quantity,omitempty"`
	UserQuantity    int64  `protobuf:"varint,6,opt,name=user_quantity,json=userQuantity,proto3" json:"user_quantity,omitempty"`
	Revenue         uint64 `protobuf:"varint,7,opt,name=revenue,proto3" json:"revenue,omitempty"`
	Rtp             uint64 `protobuf:"varint,8,opt,name=rtp,proto3" json:"rtp,omitempty"`
	RtpWithTurnover uint64 `protobuf:"varint,9,opt,name=rtp_with_turnover,json=rtpWithTurnover,proto3" json:"rtp_with_turnover,omitempty"`
	Margin          uint64 `protobuf:"varint,10,opt,name=margin,proto3" json:"margin,omitempty"`
	AwardWithPfr    uint64 `protobuf:"varint,11,opt,name=award_with_pfr,json=awardWithPfr,proto3" json:"award_with_pfr,omitempty"`
	WagerWithPfr    uint64 `protobuf:"varint,12,opt,name=wager_with_pfr,json=wagerWithPfr,proto3" json:"wager_with_pfr,omitempty"`
}

func (x *FinancialReport) Reset() {
	*x = FinancialReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialReport) ProtoMessage() {}

func (x *FinancialReport) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialReport.ProtoReflect.Descriptor instead.
func (*FinancialReport) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{6}
}

func (x *FinancialReport) GetAward() uint64 {
	if x != nil {
		return x.Award
	}
	return 0
}

func (x *FinancialReport) GetAwardWithoutPfr() uint64 {
	if x != nil {
		return x.AwardWithoutPfr
	}
	return 0
}

func (x *FinancialReport) GetWager() uint64 {
	if x != nil {
		return x.Wager
	}
	return 0
}

func (x *FinancialReport) GetWagerWithoutPfr() uint64 {
	if x != nil {
		return x.WagerWithoutPfr
	}
	return 0
}

func (x *FinancialReport) GetSpinQuantity() int64 {
	if x != nil {
		return x.SpinQuantity
	}
	return 0
}

func (x *FinancialReport) GetUserQuantity() int64 {
	if x != nil {
		return x.UserQuantity
	}
	return 0
}

func (x *FinancialReport) GetRevenue() uint64 {
	if x != nil {
		return x.Revenue
	}
	return 0
}

func (x *FinancialReport) GetRtp() uint64 {
	if x != nil {
		return x.Rtp
	}
	return 0
}

func (x *FinancialReport) GetRtpWithTurnover() uint64 {
	if x != nil {
		return x.RtpWithTurnover
	}
	return 0
}

func (x *FinancialReport) GetMargin() uint64 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *FinancialReport) GetAwardWithPfr() uint64 {
	if x != nil {
		return x.AwardWithPfr
	}
	return 0
}

func (x *FinancialReport) GetWagerWithPfr() uint64 {
	if x != nil {
		return x.WagerWithPfr
	}
	return 0
}

type FinancialReportOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report *FinancialReport `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *FinancialReportOut) Reset() {
	*x = FinancialReportOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialReportOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialReportOut) ProtoMessage() {}

func (x *FinancialReportOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialReportOut.ProtoReflect.Descriptor instead.
func (*FinancialReportOut) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{7}
}

func (x *FinancialReportOut) GetReport() *FinancialReport {
	if x != nil {
		return x.Report
	}
	return nil
}

type GetAllGameSessionsOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions []*GameSessionOut `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *GetAllGameSessionsOut) Reset() {
	*x = GetAllGameSessionsOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllGameSessionsOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllGameSessionsOut) ProtoMessage() {}

func (x *GetAllGameSessionsOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllGameSessionsOut.ProtoReflect.Descriptor instead.
func (*GetAllGameSessionsOut) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{8}
}

func (x *GetAllGameSessionsOut) GetSessions() []*GameSessionOut {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type GetAllSpinsOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spins []*SpinOut `protobuf:"bytes,1,rep,name=spins,proto3" json:"spins,omitempty"`
}

func (x *GetAllSpinsOut) Reset() {
	*x = GetAllSpinsOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllSpinsOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllSpinsOut) ProtoMessage() {}

func (x *GetAllSpinsOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllSpinsOut.ProtoReflect.Descriptor instead.
func (*GetAllSpinsOut) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{9}
}

func (x *GetAllSpinsOut) GetSpins() []*SpinOut {
	if x != nil {
		return x.Spins
	}
	return nil
}

type GetFinancialIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order   string         `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	Page    uint64         `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit   uint64         `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	GroupBy []string       `protobuf:"bytes,4,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Base    *FinancialBase `protobuf:"bytes,6,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *GetFinancialIn) Reset() {
	*x = GetFinancialIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFinancialIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialIn) ProtoMessage() {}

func (x *GetFinancialIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialIn.ProtoReflect.Descriptor instead.
func (*GetFinancialIn) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{10}
}

func (x *GetFinancialIn) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *GetFinancialIn) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetFinancialIn) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetFinancialIn) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *GetFinancialIn) GetBase() *FinancialBase {
	if x != nil {
		return x.Base
	}
	return nil
}

type FinancialBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConvertCurrency string   `protobuf:"bytes,1,opt,name=convertCurrency,proto3" json:"convertCurrency,omitempty"`
	Games           []string `protobuf:"bytes,2,rep,name=games,proto3" json:"games,omitempty"`
	Filters         *Filters `protobuf:"bytes,3,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *FinancialBase) Reset() {
	*x = FinancialBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialBase) ProtoMessage() {}

func (x *FinancialBase) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialBase.ProtoReflect.Descriptor instead.
func (*FinancialBase) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{11}
}

func (x *FinancialBase) GetConvertCurrency() string {
	if x != nil {
		return x.ConvertCurrency
	}
	return ""
}

func (x *FinancialBase) GetGames() []string {
	if x != nil {
		return x.Games
	}
	return nil
}

func (x *FinancialBase) GetFilters() *Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type Filters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Integrator     string                 `protobuf:"bytes,1,opt,name=integrator,proto3" json:"integrator,omitempty"`
	Operator       string                 `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Game           string                 `protobuf:"bytes,3,opt,name=game,proto3" json:"game,omitempty"`
	StartingFrom   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=starting_from,json=startingFrom,proto3,oneof" json:"starting_from,omitempty"`
	EndingAt       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=ending_at,json=endingAt,proto3,oneof" json:"ending_at,omitempty"`
	SessionToken   string                 `protobuf:"bytes,6,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	RoundId        string                 `protobuf:"bytes,7,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	Host           string                 `protobuf:"bytes,8,opt,name=host,proto3" json:"host,omitempty"`
	ExternalUserId string                 `protobuf:"bytes,9,opt,name=external_user_id,json=externalUserId,proto3" json:"external_user_id,omitempty"`
	IsDemo         *bool                  `protobuf:"varint,10,opt,name=is_demo,json=isDemo,proto3,oneof" json:"is_demo,omitempty"`
}

func (x *Filters) Reset() {
	*x = Filters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filters) ProtoMessage() {}

func (x *Filters) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filters.ProtoReflect.Descriptor instead.
func (*Filters) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{12}
}

func (x *Filters) GetIntegrator() string {
	if x != nil {
		return x.Integrator
	}
	return ""
}

func (x *Filters) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *Filters) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

func (x *Filters) GetStartingFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.StartingFrom
	}
	return nil
}

func (x *Filters) GetEndingAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndingAt
	}
	return nil
}

func (x *Filters) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *Filters) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *Filters) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Filters) GetExternalUserId() string {
	if x != nil {
		return x.ExternalUserId
	}
	return ""
}

func (x *Filters) GetIsDemo() bool {
	if x != nil && x.IsDemo != nil {
		return *x.IsDemo
	}
	return false
}

type GetSessionsOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items       []*GameSessionOut `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	CurrentPage uint64            `protobuf:"varint,2,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
	Limit       uint64            `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Total       uint64            `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetSessionsOut) Reset() {
	*x = GetSessionsOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionsOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionsOut) ProtoMessage() {}

func (x *GetSessionsOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionsOut.ProtoReflect.Descriptor instead.
func (*GetSessionsOut) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{13}
}

func (x *GetSessionsOut) GetItems() []*GameSessionOut {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GetSessionsOut) GetCurrentPage() uint64 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *GetSessionsOut) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSessionsOut) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GameSessionOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	SessionToken    string                 `protobuf:"bytes,2,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	UserId          string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ExternalUserId  string                 `protobuf:"bytes,4,opt,name=external_user_id,json=externalUserId,proto3" json:"external_user_id,omitempty"`
	Wager           uint64                 `protobuf:"varint,5,opt,name=wager,proto3" json:"wager,omitempty"`
	WagerWithoutPfr uint64                 `protobuf:"varint,6,opt,name=wager_without_pfr,json=wagerWithoutPfr,proto3" json:"wager_without_pfr,omitempty"`
	Award           uint64                 `protobuf:"varint,7,opt,name=award,proto3" json:"award,omitempty"`
	AwardWithoutPfr uint64                 `protobuf:"varint,8,opt,name=award_without_pfr,json=awardWithoutPfr,proto3" json:"award_without_pfr,omitempty"`
	Currency        string                 `protobuf:"bytes,9,opt,name=currency,proto3" json:"currency,omitempty"`
	Integrator      string                 `protobuf:"bytes,10,opt,name=integrator,proto3" json:"integrator,omitempty"`
	Operator        string                 `protobuf:"bytes,11,opt,name=operator,proto3" json:"operator,omitempty"`
	GameId          string                 `protobuf:"bytes,12,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Game            string                 `protobuf:"bytes,13,opt,name=game,proto3" json:"game,omitempty"`
	Spins           []*SpinOut             `protobuf:"bytes,14,rep,name=spins,proto3" json:"spins,omitempty"`
	WagerWithPfr    uint64                 `protobuf:"varint,15,opt,name=wager_with_pfr,json=wagerWithPfr,proto3" json:"wager_with_pfr,omitempty"`
	AwardWithPfr    uint64                 `protobuf:"varint,16,opt,name=award_with_pfr,json=awardWithPfr,proto3" json:"award_with_pfr,omitempty"`
	Rtp             uint64                 `protobuf:"varint,17,opt,name=rtp,proto3" json:"rtp,omitempty"`
	RtpWithTurnover uint64                 `protobuf:"varint,18,opt,name=rtp_with_turnover,json=rtpWithTurnover,proto3" json:"rtp_with_turnover,omitempty"`
	Margin          uint64                 `protobuf:"varint,19,opt,name=margin,proto3" json:"margin,omitempty"`
	Revenue         uint64                 `protobuf:"varint,20,opt,name=revenue,proto3" json:"revenue,omitempty"`
	StartBalance    uint64                 `protobuf:"varint,21,opt,name=start_balance,json=startBalance,proto3" json:"start_balance,omitempty"`
	EndBalance      uint64                 `protobuf:"varint,22,opt,name=end_balance,json=endBalance,proto3" json:"end_balance,omitempty"`
	BaseAward       uint64                 `protobuf:"varint,23,opt,name=base_award,json=baseAward,proto3" json:"base_award,omitempty"`
	BonusAward      uint64                 `protobuf:"varint,24,opt,name=bonus_award,json=bonusAward,proto3" json:"bonus_award,omitempty"`
	FinalAward      uint64                 `protobuf:"varint,25,opt,name=final_award,json=finalAward,proto3" json:"final_award,omitempty"`
}

func (x *GameSessionOut) Reset() {
	*x = GameSessionOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSessionOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSessionOut) ProtoMessage() {}

func (x *GameSessionOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSessionOut.ProtoReflect.Descriptor instead.
func (*GameSessionOut) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{14}
}

func (x *GameSessionOut) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GameSessionOut) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *GameSessionOut) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GameSessionOut) GetExternalUserId() string {
	if x != nil {
		return x.ExternalUserId
	}
	return ""
}

func (x *GameSessionOut) GetWager() uint64 {
	if x != nil {
		return x.Wager
	}
	return 0
}

func (x *GameSessionOut) GetWagerWithoutPfr() uint64 {
	if x != nil {
		return x.WagerWithoutPfr
	}
	return 0
}

func (x *GameSessionOut) GetAward() uint64 {
	if x != nil {
		return x.Award
	}
	return 0
}

func (x *GameSessionOut) GetAwardWithoutPfr() uint64 {
	if x != nil {
		return x.AwardWithoutPfr
	}
	return 0
}

func (x *GameSessionOut) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *GameSessionOut) GetIntegrator() string {
	if x != nil {
		return x.Integrator
	}
	return ""
}

func (x *GameSessionOut) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *GameSessionOut) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *GameSessionOut) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

func (x *GameSessionOut) GetSpins() []*SpinOut {
	if x != nil {
		return x.Spins
	}
	return nil
}

func (x *GameSessionOut) GetWagerWithPfr() uint64 {
	if x != nil {
		return x.WagerWithPfr
	}
	return 0
}

func (x *GameSessionOut) GetAwardWithPfr() uint64 {
	if x != nil {
		return x.AwardWithPfr
	}
	return 0
}

func (x *GameSessionOut) GetRtp() uint64 {
	if x != nil {
		return x.Rtp
	}
	return 0
}

func (x *GameSessionOut) GetRtpWithTurnover() uint64 {
	if x != nil {
		return x.RtpWithTurnover
	}
	return 0
}

func (x *GameSessionOut) GetMargin() uint64 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *GameSessionOut) GetRevenue() uint64 {
	if x != nil {
		return x.Revenue
	}
	return 0
}

func (x *GameSessionOut) GetStartBalance() uint64 {
	if x != nil {
		return x.StartBalance
	}
	return 0
}

func (x *GameSessionOut) GetEndBalance() uint64 {
	if x != nil {
		return x.EndBalance
	}
	return 0
}

func (x *GameSessionOut) GetBaseAward() uint64 {
	if x != nil {
		return x.BaseAward
	}
	return 0
}

func (x *GameSessionOut) GetBonusAward() uint64 {
	if x != nil {
		return x.BonusAward
	}
	return 0
}

func (x *GameSessionOut) GetFinalAward() uint64 {
	if x != nil {
		return x.FinalAward
	}
	return 0
}

type GetSpinsOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items       []*SpinOut `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	CurrentPage uint64     `protobuf:"varint,2,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
	Limit       uint64     `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Total       uint64     `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetSpinsOut) Reset() {
	*x = GetSpinsOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpinsOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpinsOut) ProtoMessage() {}

func (x *GetSpinsOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpinsOut.ProtoReflect.Descriptor instead.
func (*GetSpinsOut) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{15}
}

func (x *GetSpinsOut) GetItems() []*SpinOut {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GetSpinsOut) GetCurrentPage() uint64 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *GetSpinsOut) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSpinsOut) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SpinIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Host             string                 `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	ClientIp         string                 `protobuf:"bytes,4,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	UserAgent        string                 `protobuf:"bytes,5,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Request          []byte                 `protobuf:"bytes,6,opt,name=request,proto3" json:"request,omitempty"`
	Id               string                 `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	GameId           string                 `protobuf:"bytes,8,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Game             string                 `protobuf:"bytes,9,opt,name=game,proto3" json:"game,omitempty"`
	SessionToken     string                 `protobuf:"bytes,10,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	TransactionId    string                 `protobuf:"bytes,11,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Integrator       string                 `protobuf:"bytes,12,opt,name=integrator,proto3" json:"integrator,omitempty"`
	Operator         string                 `protobuf:"bytes,13,opt,name=operator,proto3" json:"operator,omitempty"`
	Provider         string                 `protobuf:"bytes,14,opt,name=provider,proto3" json:"provider,omitempty"`
	InternalUserId   string                 `protobuf:"bytes,15,opt,name=internal_user_id,json=internalUserId,proto3" json:"internal_user_id,omitempty"`
	ExternalUserId   string                 `protobuf:"bytes,16,opt,name=external_user_id,json=externalUserId,proto3" json:"external_user_id,omitempty"`
	Currency         string                 `protobuf:"bytes,17,opt,name=currency,proto3" json:"currency,omitempty"`
	StartBalance     uint64                 `protobuf:"varint,18,opt,name=start_balance,json=startBalance,proto3" json:"start_balance,omitempty"`
	EndBalance       uint64                 `protobuf:"varint,19,opt,name=end_balance,json=endBalance,proto3" json:"end_balance,omitempty"`
	Wager            uint64                 `protobuf:"varint,20,opt,name=wager,proto3" json:"wager,omitempty"`
	BaseAward        uint64                 `protobuf:"varint,21,opt,name=base_award,json=baseAward,proto3" json:"base_award,omitempty"`
	BonusAward       uint64                 `protobuf:"varint,22,opt,name=bonus_award,json=bonusAward,proto3" json:"bonus_award,omitempty"`
	FinalAward       uint64                 `protobuf:"varint,23,opt,name=final_award,json=finalAward,proto3" json:"final_award,omitempty"`
	RestoringIndexes []byte                 `protobuf:"bytes,24,opt,name=restoring_indexes,json=restoringIndexes,proto3" json:"restoring_indexes,omitempty"`
	Details          []byte                 `protobuf:"bytes,25,opt,name=details,proto3" json:"details,omitempty"`
	IsPfr            bool                   `protobuf:"varint,26,opt,name=is_pfr,json=isPfr,proto3" json:"is_pfr,omitempty"`
	IsShown          bool                   `protobuf:"varint,27,opt,name=is_shown,json=isShown,proto3" json:"is_shown,omitempty"`
	IsDemo           *bool                  `protobuf:"varint,28,opt,name=is_demo,json=isDemo,proto3,oneof" json:"is_demo,omitempty"`
}

func (x *SpinIn) Reset() {
	*x = SpinIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpinIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpinIn) ProtoMessage() {}

func (x *SpinIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpinIn.ProtoReflect.Descriptor instead.
func (*SpinIn) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{16}
}

func (x *SpinIn) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SpinIn) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SpinIn) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SpinIn) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *SpinIn) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *SpinIn) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *SpinIn) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SpinIn) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *SpinIn) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

func (x *SpinIn) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *SpinIn) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *SpinIn) GetIntegrator() string {
	if x != nil {
		return x.Integrator
	}
	return ""
}

func (x *SpinIn) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *SpinIn) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *SpinIn) GetInternalUserId() string {
	if x != nil {
		return x.InternalUserId
	}
	return ""
}

func (x *SpinIn) GetExternalUserId() string {
	if x != nil {
		return x.ExternalUserId
	}
	return ""
}

func (x *SpinIn) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *SpinIn) GetStartBalance() uint64 {
	if x != nil {
		return x.StartBalance
	}
	return 0
}

func (x *SpinIn) GetEndBalance() uint64 {
	if x != nil {
		return x.EndBalance
	}
	return 0
}

func (x *SpinIn) GetWager() uint64 {
	if x != nil {
		return x.Wager
	}
	return 0
}

func (x *SpinIn) GetBaseAward() uint64 {
	if x != nil {
		return x.BaseAward
	}
	return 0
}

func (x *SpinIn) GetBonusAward() uint64 {
	if x != nil {
		return x.BonusAward
	}
	return 0
}

func (x *SpinIn) GetFinalAward() uint64 {
	if x != nil {
		return x.FinalAward
	}
	return 0
}

func (x *SpinIn) GetRestoringIndexes() []byte {
	if x != nil {
		return x.RestoringIndexes
	}
	return nil
}

func (x *SpinIn) GetDetails() []byte {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *SpinIn) GetIsPfr() bool {
	if x != nil {
		return x.IsPfr
	}
	return false
}

func (x *SpinIn) GetIsShown() bool {
	if x != nil {
		return x.IsShown
	}
	return false
}

func (x *SpinIn) GetIsDemo() bool {
	if x != nil && x.IsDemo != nil {
		return *x.IsDemo
	}
	return false
}

type SpinOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Country          string                 `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	Host             string                 `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	ClientIp         string                 `protobuf:"bytes,5,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	UserAgent        string                 `protobuf:"bytes,6,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Request          []byte                 `protobuf:"bytes,7,opt,name=request,proto3" json:"request,omitempty"`
	Id               string                 `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
	GameId           string                 `protobuf:"bytes,9,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Game             string                 `protobuf:"bytes,10,opt,name=game,proto3" json:"game,omitempty"`
	SessionToken     string                 `protobuf:"bytes,11,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	TransactionId    string                 `protobuf:"bytes,12,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Integrator       string                 `protobuf:"bytes,13,opt,name=integrator,proto3" json:"integrator,omitempty"`
	Operator         string                 `protobuf:"bytes,14,opt,name=operator,proto3" json:"operator,omitempty"`
	Provider         string                 `protobuf:"bytes,15,opt,name=provider,proto3" json:"provider,omitempty"`
	InternalUserId   string                 `protobuf:"bytes,16,opt,name=internal_user_id,json=internalUserId,proto3" json:"internal_user_id,omitempty"`
	ExternalUserId   string                 `protobuf:"bytes,17,opt,name=external_user_id,json=externalUserId,proto3" json:"external_user_id,omitempty"`
	Currency         string                 `protobuf:"bytes,18,opt,name=currency,proto3" json:"currency,omitempty"`
	StartBalance     uint64                 `protobuf:"varint,19,opt,name=start_balance,json=startBalance,proto3" json:"start_balance,omitempty"`
	EndBalance       uint64                 `protobuf:"varint,20,opt,name=end_balance,json=endBalance,proto3" json:"end_balance,omitempty"`
	Wager            uint64                 `protobuf:"varint,21,opt,name=wager,proto3" json:"wager,omitempty"`
	BaseAward        uint64                 `protobuf:"varint,22,opt,name=base_award,json=baseAward,proto3" json:"base_award,omitempty"`
	BonusAward       uint64                 `protobuf:"varint,23,opt,name=bonus_award,json=bonusAward,proto3" json:"bonus_award,omitempty"`
	FinalAward       uint64                 `protobuf:"varint,24,opt,name=final_award,json=finalAward,proto3" json:"final_award,omitempty"`
	RestoringIndexes []byte                 `protobuf:"bytes,25,opt,name=restoring_indexes,json=restoringIndexes,proto3" json:"restoring_indexes,omitempty"`
	Details          []byte                 `protobuf:"bytes,26,opt,name=details,proto3" json:"details,omitempty"`
	IsPfr            *bool                  `protobuf:"varint,27,opt,name=is_pfr,json=isPfr,proto3,oneof" json:"is_pfr,omitempty"`
	IsShown          *bool                  `protobuf:"varint,28,opt,name=is_shown,json=isShown,proto3,oneof" json:"is_shown,omitempty"`
	IsDemo           *bool                  `protobuf:"varint,29,opt,name=is_demo,json=isDemo,proto3,oneof" json:"is_demo,omitempty"`
}

func (x *SpinOut) Reset() {
	*x = SpinOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpinOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpinOut) ProtoMessage() {}

func (x *SpinOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpinOut.ProtoReflect.Descriptor instead.
func (*SpinOut) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{17}
}

func (x *SpinOut) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SpinOut) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SpinOut) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *SpinOut) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SpinOut) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *SpinOut) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *SpinOut) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *SpinOut) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SpinOut) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *SpinOut) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

func (x *SpinOut) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *SpinOut) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *SpinOut) GetIntegrator() string {
	if x != nil {
		return x.Integrator
	}
	return ""
}

func (x *SpinOut) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *SpinOut) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *SpinOut) GetInternalUserId() string {
	if x != nil {
		return x.InternalUserId
	}
	return ""
}

func (x *SpinOut) GetExternalUserId() string {
	if x != nil {
		return x.ExternalUserId
	}
	return ""
}

func (x *SpinOut) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *SpinOut) GetStartBalance() uint64 {
	if x != nil {
		return x.StartBalance
	}
	return 0
}

func (x *SpinOut) GetEndBalance() uint64 {
	if x != nil {
		return x.EndBalance
	}
	return 0
}

func (x *SpinOut) GetWager() uint64 {
	if x != nil {
		return x.Wager
	}
	return 0
}

func (x *SpinOut) GetBaseAward() uint64 {
	if x != nil {
		return x.BaseAward
	}
	return 0
}

func (x *SpinOut) GetBonusAward() uint64 {
	if x != nil {
		return x.BonusAward
	}
	return 0
}

func (x *SpinOut) GetFinalAward() uint64 {
	if x != nil {
		return x.FinalAward
	}
	return 0
}

func (x *SpinOut) GetRestoringIndexes() []byte {
	if x != nil {
		return x.RestoringIndexes
	}
	return nil
}

func (x *SpinOut) GetDetails() []byte {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *SpinOut) GetIsPfr() bool {
	if x != nil && x.IsPfr != nil {
		return *x.IsPfr
	}
	return false
}

func (x *SpinOut) GetIsShown() bool {
	if x != nil && x.IsShown != nil {
		return *x.IsShown
	}
	return false
}

func (x *SpinOut) GetIsDemo() bool {
	if x != nil && x.IsDemo != nil {
		return *x.IsDemo
	}
	return false
}

type GetSpinIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundId         string `protobuf:"bytes,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	ConvertCurrency string `protobuf:"bytes,2,opt,name=convertCurrency,proto3" json:"convertCurrency,omitempty"`
}

func (x *GetSpinIn) Reset() {
	*x = GetSpinIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpinIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpinIn) ProtoMessage() {}

func (x *GetSpinIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpinIn.ProtoReflect.Descriptor instead.
func (*GetSpinIn) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{18}
}

func (x *GetSpinIn) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *GetSpinIn) GetConvertCurrency() string {
	if x != nil {
		return x.ConvertCurrency
	}
	return ""
}

type GetLastSpinIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Game           string `protobuf:"bytes,1,opt,name=game,proto3" json:"game,omitempty"`
	InternalUserId string `protobuf:"bytes,2,opt,name=internal_user_id,json=internalUserId,proto3" json:"internal_user_id,omitempty"`
}

func (x *GetLastSpinIn) Reset() {
	*x = GetLastSpinIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastSpinIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastSpinIn) ProtoMessage() {}

func (x *GetLastSpinIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastSpinIn.ProtoReflect.Descriptor instead.
func (*GetLastSpinIn) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{19}
}

func (x *GetLastSpinIn) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

func (x *GetLastSpinIn) GetInternalUserId() string {
	if x != nil {
		return x.InternalUserId
	}
	return ""
}

type GetLastSpinByWagerIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Game           string `protobuf:"bytes,1,opt,name=game,proto3" json:"game,omitempty"`
	InternalUserId string `protobuf:"bytes,2,opt,name=internal_user_id,json=internalUserId,proto3" json:"internal_user_id,omitempty"`
	Wager          uint64 `protobuf:"varint,3,opt,name=wager,proto3" json:"wager,omitempty"`
}

func (x *GetLastSpinByWagerIn) Reset() {
	*x = GetLastSpinByWagerIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastSpinByWagerIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastSpinByWagerIn) ProtoMessage() {}

func (x *GetLastSpinByWagerIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastSpinByWagerIn.ProtoReflect.Descriptor instead.
func (*GetLastSpinByWagerIn) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{20}
}

func (x *GetLastSpinByWagerIn) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

func (x *GetLastSpinByWagerIn) GetInternalUserId() string {
	if x != nil {
		return x.InternalUserId
	}
	return ""
}

func (x *GetLastSpinByWagerIn) GetWager() uint64 {
	if x != nil {
		return x.Wager
	}
	return 0
}

type GetSpinOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item    *SpinOut `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	IsFound bool     `protobuf:"varint,2,opt,name=isFound,proto3" json:"isFound,omitempty"`
}

func (x *GetSpinOut) Reset() {
	*x = GetSpinOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpinOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpinOut) ProtoMessage() {}

func (x *GetSpinOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpinOut.ProtoReflect.Descriptor instead.
func (*GetSpinOut) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{21}
}

func (x *GetSpinOut) GetItem() *SpinOut {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *GetSpinOut) GetIsFound() bool {
	if x != nil {
		return x.IsFound
	}
	return false
}

type GetLastSpinsOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*SpinOut `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetLastSpinsOut) Reset() {
	*x = GetLastSpinsOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastSpinsOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastSpinsOut) ProtoMessage() {}

func (x *GetLastSpinsOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastSpinsOut.ProtoReflect.Descriptor instead.
func (*GetLastSpinsOut) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{22}
}

func (x *GetLastSpinsOut) GetItems() []*SpinOut {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetSpinPaginationIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *GetLastSpinIn `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Limit  uint64         `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Page   uint64         `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetSpinPaginationIn) Reset() {
	*x = GetSpinPaginationIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpinPaginationIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpinPaginationIn) ProtoMessage() {}

func (x *GetSpinPaginationIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpinPaginationIn.ProtoReflect.Descriptor instead.
func (*GetSpinPaginationIn) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{23}
}

func (x *GetSpinPaginationIn) GetFilter() *GetLastSpinIn {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetSpinPaginationIn) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSpinPaginationIn) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type GetSpinPaginationOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*SpinOut `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Page  uint64     `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit uint64     `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Total uint64     `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetSpinPaginationOut) Reset() {
	*x = GetSpinPaginationOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpinPaginationOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpinPaginationOut) ProtoMessage() {}

func (x *GetSpinPaginationOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpinPaginationOut.ProtoReflect.Descriptor instead.
func (*GetSpinPaginationOut) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{24}
}

func (x *GetSpinPaginationOut) GetItems() []*SpinOut {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GetSpinPaginationOut) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetSpinPaginationOut) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSpinPaginationOut) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DictionaryOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []string `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *DictionaryOut) Reset() {
	*x = DictionaryOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DictionaryOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictionaryOut) ProtoMessage() {}

func (x *DictionaryOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictionaryOut.ProtoReflect.Descriptor instead.
func (*DictionaryOut) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{25}
}

func (x *DictionaryOut) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

type GamesIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Games []string `protobuf:"bytes,1,rep,name=games,proto3" json:"games,omitempty"`
}

func (x *GamesIn) Reset() {
	*x = GamesIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamesIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamesIn) ProtoMessage() {}

func (x *GamesIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamesIn.ProtoReflect.Descriptor instead.
func (*GamesIn) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{26}
}

func (x *GamesIn) GetGames() []string {
	if x != nil {
		return x.Games
	}
	return nil
}

type IntegratorsOperatorOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map map[string]*DictionaryOut `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IntegratorsOperatorOut) Reset() {
	*x = IntegratorsOperatorOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegratorsOperatorOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegratorsOperatorOut) ProtoMessage() {}

func (x *IntegratorsOperatorOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegratorsOperatorOut.ProtoReflect.Descriptor instead.
func (*IntegratorsOperatorOut) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{27}
}

func (x *IntegratorsOperatorOut) GetMap() map[string]*DictionaryOut {
	if x != nil {
		return x.Map
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_history_history_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_history_history_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_pkg_history_history_proto_rawDescGZIP(), []int{28}
}

func (x *Status) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_pkg_history_history_proto protoreflect.FileDescriptor

var file_pkg_history_history_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x6b, 0x67, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x22, 0x8d, 0x03, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x44, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x72,
	0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x70, 0x66, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x05, 0x69, 0x73, 0x50, 0x66, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x03, 0x52, 0x06, 0x69, 0x73, 0x44, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x66, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f,
	0x64, 0x65, 0x6d, 0x6f, 0x22, 0x5c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x47, 0x61, 0x6d,
	0x65, 0x4f, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x62, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x4f, 0x75, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x77, 0x61, 0x67, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x61, 0x77, 0x61, 0x72, 0x64, 0x22, 0xc4, 0x01,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x67, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x61, 0x67, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x77, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x61,
	0x77, 0x61, 0x72, 0x64, 0x22, 0x9b, 0x03, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f,
	0x70, 0x66, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x50, 0x66, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61,
	0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x77, 0x61, 0x67, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x11, 0x77, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75,
	0x74, 0x5f, 0x70, 0x66, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x77, 0x61, 0x67,
	0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x50, 0x66, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x70, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x70, 0x69, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x74, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x72,
	0x74, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x74, 0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74,
	0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72,
	0x74, 0x70, 0x57, 0x69, 0x74, 0x68, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x66, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x61, 0x77, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x50, 0x66, 0x72, 0x12, 0x24, 0x0a, 0x0e,
	0x77, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x66, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x77, 0x61, 0x67, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x50,
	0x66, 0x72, 0x22, 0x46, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x4c, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x4f, 0x75, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x08,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x38, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x53, 0x70, 0x69, 0x6e, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x70,
	0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x53, 0x70, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x05, 0x73, 0x70, 0x69,
	0x6e, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x49, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62,
	0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x12, 0x2a, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0x7b, 0x0a, 0x0d,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2a, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xa5, 0x03, 0x0a, 0x07, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x65,
	0x6d, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x06, 0x69, 0x73, 0x44, 0x65,
	0x6d, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6d,
	0x6f, 0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x4f, 0x75, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0xc7, 0x06, 0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x67, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x77, 0x61, 0x67, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x11, 0x77, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f,
	0x70, 0x66, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x77, 0x61, 0x67, 0x65, 0x72,
	0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x50, 0x66, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75,
	0x74, 0x5f, 0x70, 0x66, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x77, 0x61,
	0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x50, 0x66, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x70, 0x69, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x70, 0x69, 0x6e, 0x4f,
	0x75, 0x74, 0x52, 0x05, 0x73, 0x70, 0x69, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x66, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x77, 0x61, 0x67, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x50, 0x66, 0x72, 0x12,
	0x24, 0x0a, 0x0e, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x66,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x77, 0x61, 0x72, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x50, 0x66, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x74, 0x70, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x72, 0x74, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x74, 0x70, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x72, 0x74, 0x70, 0x57, 0x69, 0x74, 0x68, 0x54, 0x75, 0x72, 0x6e, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e,
	0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x77, 0x61, 0x72, 0x64, 0x22, 0x84, 0x01, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x53, 0x70, 0x69, 0x6e, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x70, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x99, 0x07, 0x0a, 0x06, 0x53, 0x70, 0x69, 0x6e, 0x49, 0x6e, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x67, 0x65, 0x72, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x77, 0x61, 0x67, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x70, 0x66, 0x72, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x50, 0x66, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x53, 0x68, 0x6f, 0x77, 0x6e, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6d, 0x6f,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x69, 0x73, 0x44, 0x65, 0x6d, 0x6f,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x22,
	0xd6, 0x07, 0x0a, 0x07, 0x53, 0x70, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x6e, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x77, 0x61, 0x67, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x77, 0x61, 0x67,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10,
	0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x06, 0x69, 0x73,
	0x5f, 0x70, 0x66, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x69, 0x73,
	0x50, 0x66, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f,
	0x77, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x69, 0x73, 0x53, 0x68,
	0x6f, 0x77, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6d,
	0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x06, 0x69, 0x73, 0x44, 0x65, 0x6d,
	0x6f, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x66, 0x72, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x22, 0x50, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53,
	0x70, 0x69, 0x6e, 0x49, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x4d, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x70, 0x69, 0x6e, 0x49, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x67,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x73, 0x74, 0x53, 0x70, 0x69, 0x6e, 0x42, 0x79, 0x57, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x61, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x77, 0x61, 0x67, 0x65, 0x72, 0x22, 0x4c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x70, 0x69, 0x6e,
	0x4f, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x70, 0x69, 0x6e,
	0x4f, 0x75, 0x74, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x46, 0x6f,
	0x75, 0x6e, 0x64, 0x22, 0x39, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x70,
	0x69, 0x6e, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x53, 0x70, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x6f,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x70, 0x69, 0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x70, 0x69, 0x6e, 0x49, 0x6e, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22,
	0x7e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x70, 0x69, 0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x53, 0x70, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x25, 0x0a, 0x0d, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x75, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x1f, 0x0a, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4f,
	0x75, 0x74, 0x12, 0x3a, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4f, 0x75, 0x74,
	0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x1a, 0x4e,
	0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x4f, 0x75, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x20,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x32, 0xd6, 0x0a, 0x0a, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x70, 0x69, 0x6e, 0x73, 0x12,
	0x17, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x1a, 0x14, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x69, 0x6e, 0x73, 0x4f, 0x75, 0x74, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x17, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x1a, 0x17, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x75,
	0x74, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x70, 0x69,
	0x6e, 0x73, 0x12, 0x16, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x1a, 0x17, 0x2e, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x70, 0x69, 0x6e, 0x73,
	0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x61,
	0x73, 0x65, 0x1a, 0x1e, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4f,
	0x75, 0x74, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x61,
	0x73, 0x65, 0x1a, 0x1b, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x75, 0x74, 0x22,
	0x00, 0x12, 0x69, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x1a, 0x25, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x1a, 0x28, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x3e, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x1a, 0x17, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x3c, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x73,
	0x65, 0x1a, 0x16, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x42, 0x61, 0x73, 0x65, 0x1a, 0x16, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x44,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x10, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x1a, 0x1f, 0x2e, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x30, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x70, 0x69, 0x6e, 0x12, 0x0f, 0x2e, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x70, 0x69, 0x6e, 0x49, 0x6e, 0x1a, 0x0f, 0x2e, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12,
	0x30, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x70, 0x69, 0x6e, 0x12, 0x0f, 0x2e,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x70, 0x69, 0x6e, 0x49, 0x6e, 0x1a, 0x0f,
	0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x34, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x70, 0x69, 0x6e, 0x12, 0x12, 0x2e, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x69, 0x6e, 0x49, 0x6e,
	0x1a, 0x13, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70,
	0x69, 0x6e, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x73, 0x74, 0x53, 0x70, 0x69, 0x6e, 0x12, 0x16, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x70, 0x69, 0x6e, 0x49, 0x6e, 0x1a, 0x13,
	0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x69, 0x6e,
	0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74,
	0x4e, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x53, 0x70, 0x69, 0x6e, 0x73, 0x12, 0x16, 0x2e,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53,
	0x70, 0x69, 0x6e, 0x49, 0x6e, 0x1a, 0x18, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x70, 0x69, 0x6e, 0x73, 0x4f, 0x75, 0x74, 0x22,
	0x00, 0x12, 0x4a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x70, 0x69, 0x6e,
	0x42, 0x79, 0x57, 0x61, 0x67, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x70, 0x69, 0x6e, 0x42, 0x79, 0x57,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x1a, 0x13, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x53, 0x70, 0x69, 0x6e, 0x73, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x70, 0x69, 0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x1a, 0x1d, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x70, 0x69, 0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74,
	0x22, 0x00, 0x12, 0x35, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x0f, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0x0f, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_history_history_proto_rawDescOnce sync.Once
	file_pkg_history_history_proto_rawDescData = file_pkg_history_history_proto_rawDesc
)

func file_pkg_history_history_proto_rawDescGZIP() []byte {
	file_pkg_history_history_proto_rawDescOnce.Do(func() {
		file_pkg_history_history_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_history_history_proto_rawDescData)
	})
	return file_pkg_history_history_proto_rawDescData
}

var file_pkg_history_history_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_pkg_history_history_proto_goTypes = []interface{}{
	(*GetSessionIn)(nil),                     // 0: history.GetSessionIn
	(*GetAggregatedReportFilters)(nil),       // 1: history.GetAggregatedReportFilters
	(*GetAggregatedReportByGameOut)(nil),     // 2: history.GetAggregatedReportByGameOut
	(*GetAggregatedReportByCountryOut)(nil),  // 3: history.GetAggregatedReportByCountryOut
	(*GetAggregatedReportByGameItem)(nil),    // 4: history.GetAggregatedReportByGameItem
	(*GetAggregatedReportByCountryItem)(nil), // 5: history.GetAggregatedReportByCountryItem
	(*FinancialReport)(nil),                  // 6: history.FinancialReport
	(*FinancialReportOut)(nil),               // 7: history.FinancialReportOut
	(*GetAllGameSessionsOut)(nil),            // 8: history.GetAllGameSessionsOut
	(*GetAllSpinsOut)(nil),                   // 9: history.GetAllSpinsOut
	(*GetFinancialIn)(nil),                   // 10: history.GetFinancialIn
	(*FinancialBase)(nil),                    // 11: history.FinancialBase
	(*Filters)(nil),                          // 12: history.Filters
	(*GetSessionsOut)(nil),                   // 13: history.GetSessionsOut
	(*GameSessionOut)(nil),                   // 14: history.GameSessionOut
	(*GetSpinsOut)(nil),                      // 15: history.GetSpinsOut
	(*SpinIn)(nil),                           // 16: history.SpinIn
	(*SpinOut)(nil),                          // 17: history.SpinOut
	(*GetSpinIn)(nil),                        // 18: history.GetSpinIn
	(*GetLastSpinIn)(nil),                    // 19: history.GetLastSpinIn
	(*GetLastSpinByWagerIn)(nil),             // 20: history.GetLastSpinByWagerIn
	(*GetSpinOut)(nil),                       // 21: history.GetSpinOut
	(*GetLastSpinsOut)(nil),                  // 22: history.GetLastSpinsOut
	(*GetSpinPaginationIn)(nil),              // 23: history.GetSpinPaginationIn
	(*GetSpinPaginationOut)(nil),             // 24: history.GetSpinPaginationOut
	(*DictionaryOut)(nil),                    // 25: history.DictionaryOut
	(*GamesIn)(nil),                          // 26: history.GamesIn
	(*IntegratorsOperatorOut)(nil),           // 27: history.IntegratorsOperatorOut
	(*Status)(nil),                           // 28: history.Status
	nil,                                      // 29: history.IntegratorsOperatorOut.MapEntry
	(*timestamppb.Timestamp)(nil),            // 30: google.protobuf.Timestamp
}
var file_pkg_history_history_proto_depIdxs = []int32{
	30, // 0: history.GetAggregatedReportFilters.starting_from:type_name -> google.protobuf.Timestamp
	30, // 1: history.GetAggregatedReportFilters.ending_at:type_name -> google.protobuf.Timestamp
	4,  // 2: history.GetAggregatedReportByGameOut.items:type_name -> history.GetAggregatedReportByGameItem
	5,  // 3: history.GetAggregatedReportByCountryOut.items:type_name -> history.GetAggregatedReportByCountryItem
	6,  // 4: history.FinancialReportOut.report:type_name -> history.FinancialReport
	14, // 5: history.GetAllGameSessionsOut.sessions:type_name -> history.GameSessionOut
	17, // 6: history.GetAllSpinsOut.spins:type_name -> history.SpinOut
	11, // 7: history.GetFinancialIn.base:type_name -> history.FinancialBase
	12, // 8: history.FinancialBase.filters:type_name -> history.Filters
	30, // 9: history.Filters.starting_from:type_name -> google.protobuf.Timestamp
	30, // 10: history.Filters.ending_at:type_name -> google.protobuf.Timestamp
	14, // 11: history.GetSessionsOut.items:type_name -> history.GameSessionOut
	30, // 12: history.GameSessionOut.created_at:type_name -> google.protobuf.Timestamp
	17, // 13: history.GameSessionOut.spins:type_name -> history.SpinOut
	17, // 14: history.GetSpinsOut.items:type_name -> history.SpinOut
	30, // 15: history.SpinIn.created_at:type_name -> google.protobuf.Timestamp
	30, // 16: history.SpinIn.updated_at:type_name -> google.protobuf.Timestamp
	30, // 17: history.SpinOut.created_at:type_name -> google.protobuf.Timestamp
	30, // 18: history.SpinOut.updated_at:type_name -> google.protobuf.Timestamp
	17, // 19: history.GetSpinOut.item:type_name -> history.SpinOut
	17, // 20: history.GetLastSpinsOut.items:type_name -> history.SpinOut
	19, // 21: history.GetSpinPaginationIn.filter:type_name -> history.GetLastSpinIn
	17, // 22: history.GetSpinPaginationOut.items:type_name -> history.SpinOut
	29, // 23: history.IntegratorsOperatorOut.map:type_name -> history.IntegratorsOperatorOut.MapEntry
	25, // 24: history.IntegratorsOperatorOut.MapEntry.value:type_name -> history.DictionaryOut
	10, // 25: history.HistoryService.GetSpins:input_type -> history.GetFinancialIn
	10, // 26: history.HistoryService.GetSessions:input_type -> history.GetFinancialIn
	11, // 27: history.HistoryService.GetAllSpins:input_type -> history.FinancialBase
	11, // 28: history.HistoryService.GetAllGameSession:input_type -> history.FinancialBase
	11, // 29: history.HistoryService.GetFinancialReport:input_type -> history.FinancialBase
	1,  // 30: history.HistoryService.GetAggregatedReportByGame:input_type -> history.GetAggregatedReportFilters
	1,  // 31: history.HistoryService.GetAggregatedReportByCountry:input_type -> history.GetAggregatedReportFilters
	0,  // 32: history.HistoryService.GetSession:input_type -> history.GetSessionIn
	11, // 33: history.HistoryService.GetHosts:input_type -> history.FinancialBase
	11, // 34: history.HistoryService.GetCurrencies:input_type -> history.FinancialBase
	26, // 35: history.HistoryService.GetIntegratorOperators:input_type -> history.GamesIn
	16, // 36: history.HistoryService.CreateSpin:input_type -> history.SpinIn
	16, // 37: history.HistoryService.UpdateSpin:input_type -> history.SpinIn
	18, // 38: history.HistoryService.GetSpin:input_type -> history.GetSpinIn
	19, // 39: history.HistoryService.GetLastSpin:input_type -> history.GetLastSpinIn
	19, // 40: history.HistoryService.GetLastNotShownSpins:input_type -> history.GetLastSpinIn
	20, // 41: history.HistoryService.GetLastSpinByWager:input_type -> history.GetLastSpinByWagerIn
	23, // 42: history.HistoryService.GetSpinsPagination:input_type -> history.GetSpinPaginationIn
	28, // 43: history.HistoryService.HealthCheck:input_type -> history.Status
	15, // 44: history.HistoryService.GetSpins:output_type -> history.GetSpinsOut
	13, // 45: history.HistoryService.GetSessions:output_type -> history.GetSessionsOut
	9,  // 46: history.HistoryService.GetAllSpins:output_type -> history.GetAllSpinsOut
	8,  // 47: history.HistoryService.GetAllGameSession:output_type -> history.GetAllGameSessionsOut
	7,  // 48: history.HistoryService.GetFinancialReport:output_type -> history.FinancialReportOut
	2,  // 49: history.HistoryService.GetAggregatedReportByGame:output_type -> history.GetAggregatedReportByGameOut
	3,  // 50: history.HistoryService.GetAggregatedReportByCountry:output_type -> history.GetAggregatedReportByCountryOut
	14, // 51: history.HistoryService.GetSession:output_type -> history.GameSessionOut
	25, // 52: history.HistoryService.GetHosts:output_type -> history.DictionaryOut
	25, // 53: history.HistoryService.GetCurrencies:output_type -> history.DictionaryOut
	27, // 54: history.HistoryService.GetIntegratorOperators:output_type -> history.IntegratorsOperatorOut
	28, // 55: history.HistoryService.CreateSpin:output_type -> history.Status
	28, // 56: history.HistoryService.UpdateSpin:output_type -> history.Status
	21, // 57: history.HistoryService.GetSpin:output_type -> history.GetSpinOut
	21, // 58: history.HistoryService.GetLastSpin:output_type -> history.GetSpinOut
	22, // 59: history.HistoryService.GetLastNotShownSpins:output_type -> history.GetLastSpinsOut
	21, // 60: history.HistoryService.GetLastSpinByWager:output_type -> history.GetSpinOut
	24, // 61: history.HistoryService.GetSpinsPagination:output_type -> history.GetSpinPaginationOut
	28, // 62: history.HistoryService.HealthCheck:output_type -> history.Status
	44, // [44:63] is the sub-list for method output_type
	25, // [25:44] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_pkg_history_history_proto_init() }
func file_pkg_history_history_proto_init() {
	if File_pkg_history_history_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_history_history_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAggregatedReportFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAggregatedReportByGameOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAggregatedReportByCountryOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAggregatedReportByGameItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAggregatedReportByCountryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinancialReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinancialReportOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllGameSessionsOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllSpinsOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFinancialIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinancialBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionsOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSessionOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpinsOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpinIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpinOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpinIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastSpinIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastSpinByWagerIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpinOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastSpinsOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpinPaginationIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpinPaginationOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DictionaryOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamesIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegratorsOperatorOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_history_history_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_history_history_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_pkg_history_history_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_pkg_history_history_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_pkg_history_history_proto_msgTypes[17].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_history_history_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_history_history_proto_goTypes,
		DependencyIndexes: file_pkg_history_history_proto_depIdxs,
		MessageInfos:      file_pkg_history_history_proto_msgTypes,
	}.Build()
	File_pkg_history_history_proto = out.File
	file_pkg_history_history_proto_rawDesc = nil
	file_pkg_history_history_proto_goTypes = nil
	file_pkg_history_history_proto_depIdxs = nil
}
