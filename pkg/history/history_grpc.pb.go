// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: pkg/history/history.proto

package history

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HistoryServiceClient is the client API for HistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HistoryServiceClient interface {
	GetSpins(ctx context.Context, in *GetFinancialIn, opts ...grpc.CallOption) (*GetSpinsOut, error)
	GetSessions(ctx context.Context, in *GetFinancialIn, opts ...grpc.CallOption) (*GetSessionsOut, error)
	GetAllSpins(ctx context.Context, in *FinancialBase, opts ...grpc.CallOption) (*GetAllSpinsOut, error)
	GetAllGameSession(ctx context.Context, in *FinancialBase, opts ...grpc.CallOption) (*GetAllGameSessionsOut, error)
	GetFinancialReport(ctx context.Context, in *FinancialBase, opts ...grpc.CallOption) (*FinancialReportOut, error)
	GetAggregatedReportByGame(ctx context.Context, in *GetAggregatedReportFilters, opts ...grpc.CallOption) (*GetAggregatedReportByGameOut, error)
	GetAggregatedReportByCountry(ctx context.Context, in *GetAggregatedReportFilters, opts ...grpc.CallOption) (*GetAggregatedReportByCountryOut, error)
	GetSession(ctx context.Context, in *GetSessionIn, opts ...grpc.CallOption) (*GameSessionOut, error)
	GetHosts(ctx context.Context, in *FinancialBase, opts ...grpc.CallOption) (*DictionaryOut, error)
	GetCurrencies(ctx context.Context, in *FinancialBase, opts ...grpc.CallOption) (*DictionaryOut, error)
	GetIntegratorOperators(ctx context.Context, in *GamesIn, opts ...grpc.CallOption) (*IntegratorsOperatorOut, error)
	// For Slot Engine
	CreateSpin(ctx context.Context, in *SpinIn, opts ...grpc.CallOption) (*Status, error)
	UpdateSpin(ctx context.Context, in *SpinIn, opts ...grpc.CallOption) (*Status, error)
	GetSpin(ctx context.Context, in *GetSpinIn, opts ...grpc.CallOption) (*GetSpinOut, error)
	GetLastSpin(ctx context.Context, in *GetLastSpinIn, opts ...grpc.CallOption) (*GetSpinOut, error)
	GetLastNotShownSpins(ctx context.Context, in *GetLastSpinIn, opts ...grpc.CallOption) (*GetLastSpinsOut, error)
	GetLastSpinByWager(ctx context.Context, in *GetLastSpinByWagerIn, opts ...grpc.CallOption) (*GetSpinOut, error)
	GetSpinsPagination(ctx context.Context, in *GetSpinPaginationIn, opts ...grpc.CallOption) (*GetSpinPaginationOut, error)
	HealthCheck(ctx context.Context, opts ...grpc.CallOption) (HistoryService_HealthCheckClient, error)
}

type historyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHistoryServiceClient(cc grpc.ClientConnInterface) HistoryServiceClient {
	return &historyServiceClient{cc}
}

func (c *historyServiceClient) GetSpins(ctx context.Context, in *GetFinancialIn, opts ...grpc.CallOption) (*GetSpinsOut, error) {
	out := new(GetSpinsOut)
	err := c.cc.Invoke(ctx, "/history.HistoryService/GetSpins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) GetSessions(ctx context.Context, in *GetFinancialIn, opts ...grpc.CallOption) (*GetSessionsOut, error) {
	out := new(GetSessionsOut)
	err := c.cc.Invoke(ctx, "/history.HistoryService/GetSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) GetAllSpins(ctx context.Context, in *FinancialBase, opts ...grpc.CallOption) (*GetAllSpinsOut, error) {
	out := new(GetAllSpinsOut)
	err := c.cc.Invoke(ctx, "/history.HistoryService/GetAllSpins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) GetAllGameSession(ctx context.Context, in *FinancialBase, opts ...grpc.CallOption) (*GetAllGameSessionsOut, error) {
	out := new(GetAllGameSessionsOut)
	err := c.cc.Invoke(ctx, "/history.HistoryService/GetAllGameSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) GetFinancialReport(ctx context.Context, in *FinancialBase, opts ...grpc.CallOption) (*FinancialReportOut, error) {
	out := new(FinancialReportOut)
	err := c.cc.Invoke(ctx, "/history.HistoryService/GetFinancialReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) GetAggregatedReportByGame(ctx context.Context, in *GetAggregatedReportFilters, opts ...grpc.CallOption) (*GetAggregatedReportByGameOut, error) {
	out := new(GetAggregatedReportByGameOut)
	err := c.cc.Invoke(ctx, "/history.HistoryService/GetAggregatedReportByGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) GetAggregatedReportByCountry(ctx context.Context, in *GetAggregatedReportFilters, opts ...grpc.CallOption) (*GetAggregatedReportByCountryOut, error) {
	out := new(GetAggregatedReportByCountryOut)
	err := c.cc.Invoke(ctx, "/history.HistoryService/GetAggregatedReportByCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) GetSession(ctx context.Context, in *GetSessionIn, opts ...grpc.CallOption) (*GameSessionOut, error) {
	out := new(GameSessionOut)
	err := c.cc.Invoke(ctx, "/history.HistoryService/GetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) GetHosts(ctx context.Context, in *FinancialBase, opts ...grpc.CallOption) (*DictionaryOut, error) {
	out := new(DictionaryOut)
	err := c.cc.Invoke(ctx, "/history.HistoryService/GetHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) GetCurrencies(ctx context.Context, in *FinancialBase, opts ...grpc.CallOption) (*DictionaryOut, error) {
	out := new(DictionaryOut)
	err := c.cc.Invoke(ctx, "/history.HistoryService/GetCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) GetIntegratorOperators(ctx context.Context, in *GamesIn, opts ...grpc.CallOption) (*IntegratorsOperatorOut, error) {
	out := new(IntegratorsOperatorOut)
	err := c.cc.Invoke(ctx, "/history.HistoryService/GetIntegratorOperators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) CreateSpin(ctx context.Context, in *SpinIn, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/history.HistoryService/CreateSpin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) UpdateSpin(ctx context.Context, in *SpinIn, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/history.HistoryService/UpdateSpin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) GetSpin(ctx context.Context, in *GetSpinIn, opts ...grpc.CallOption) (*GetSpinOut, error) {
	out := new(GetSpinOut)
	err := c.cc.Invoke(ctx, "/history.HistoryService/GetSpin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) GetLastSpin(ctx context.Context, in *GetLastSpinIn, opts ...grpc.CallOption) (*GetSpinOut, error) {
	out := new(GetSpinOut)
	err := c.cc.Invoke(ctx, "/history.HistoryService/GetLastSpin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) GetLastNotShownSpins(ctx context.Context, in *GetLastSpinIn, opts ...grpc.CallOption) (*GetLastSpinsOut, error) {
	out := new(GetLastSpinsOut)
	err := c.cc.Invoke(ctx, "/history.HistoryService/GetLastNotShownSpins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) GetLastSpinByWager(ctx context.Context, in *GetLastSpinByWagerIn, opts ...grpc.CallOption) (*GetSpinOut, error) {
	out := new(GetSpinOut)
	err := c.cc.Invoke(ctx, "/history.HistoryService/GetLastSpinByWager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) GetSpinsPagination(ctx context.Context, in *GetSpinPaginationIn, opts ...grpc.CallOption) (*GetSpinPaginationOut, error) {
	out := new(GetSpinPaginationOut)
	err := c.cc.Invoke(ctx, "/history.HistoryService/GetSpinsPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) HealthCheck(ctx context.Context, opts ...grpc.CallOption) (HistoryService_HealthCheckClient, error) {
	stream, err := c.cc.NewStream(ctx, &HistoryService_ServiceDesc.Streams[0], "/history.HistoryService/HealthCheck", opts...)
	if err != nil {
		return nil, err
	}
	x := &historyServiceHealthCheckClient{stream}
	return x, nil
}

type HistoryService_HealthCheckClient interface {
	Send(*Status) error
	Recv() (*Status, error)
	grpc.ClientStream
}

type historyServiceHealthCheckClient struct {
	grpc.ClientStream
}

func (x *historyServiceHealthCheckClient) Send(m *Status) error {
	return x.ClientStream.SendMsg(m)
}

func (x *historyServiceHealthCheckClient) Recv() (*Status, error) {
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HistoryServiceServer is the server API for HistoryService service.
// All implementations must embed UnimplementedHistoryServiceServer
// for forward compatibility
type HistoryServiceServer interface {
	GetSpins(context.Context, *GetFinancialIn) (*GetSpinsOut, error)
	GetSessions(context.Context, *GetFinancialIn) (*GetSessionsOut, error)
	GetAllSpins(context.Context, *FinancialBase) (*GetAllSpinsOut, error)
	GetAllGameSession(context.Context, *FinancialBase) (*GetAllGameSessionsOut, error)
	GetFinancialReport(context.Context, *FinancialBase) (*FinancialReportOut, error)
	GetAggregatedReportByGame(context.Context, *GetAggregatedReportFilters) (*GetAggregatedReportByGameOut, error)
	GetAggregatedReportByCountry(context.Context, *GetAggregatedReportFilters) (*GetAggregatedReportByCountryOut, error)
	GetSession(context.Context, *GetSessionIn) (*GameSessionOut, error)
	GetHosts(context.Context, *FinancialBase) (*DictionaryOut, error)
	GetCurrencies(context.Context, *FinancialBase) (*DictionaryOut, error)
	GetIntegratorOperators(context.Context, *GamesIn) (*IntegratorsOperatorOut, error)
	// For Slot Engine
	CreateSpin(context.Context, *SpinIn) (*Status, error)
	UpdateSpin(context.Context, *SpinIn) (*Status, error)
	GetSpin(context.Context, *GetSpinIn) (*GetSpinOut, error)
	GetLastSpin(context.Context, *GetLastSpinIn) (*GetSpinOut, error)
	GetLastNotShownSpins(context.Context, *GetLastSpinIn) (*GetLastSpinsOut, error)
	GetLastSpinByWager(context.Context, *GetLastSpinByWagerIn) (*GetSpinOut, error)
	GetSpinsPagination(context.Context, *GetSpinPaginationIn) (*GetSpinPaginationOut, error)
	HealthCheck(HistoryService_HealthCheckServer) error
	mustEmbedUnimplementedHistoryServiceServer()
}

// UnimplementedHistoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHistoryServiceServer struct {
}

func (UnimplementedHistoryServiceServer) GetSpins(context.Context, *GetFinancialIn) (*GetSpinsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpins not implemented")
}
func (UnimplementedHistoryServiceServer) GetSessions(context.Context, *GetFinancialIn) (*GetSessionsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessions not implemented")
}
func (UnimplementedHistoryServiceServer) GetAllSpins(context.Context, *FinancialBase) (*GetAllSpinsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSpins not implemented")
}
func (UnimplementedHistoryServiceServer) GetAllGameSession(context.Context, *FinancialBase) (*GetAllGameSessionsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGameSession not implemented")
}
func (UnimplementedHistoryServiceServer) GetFinancialReport(context.Context, *FinancialBase) (*FinancialReportOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinancialReport not implemented")
}
func (UnimplementedHistoryServiceServer) GetAggregatedReportByGame(context.Context, *GetAggregatedReportFilters) (*GetAggregatedReportByGameOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregatedReportByGame not implemented")
}
func (UnimplementedHistoryServiceServer) GetAggregatedReportByCountry(context.Context, *GetAggregatedReportFilters) (*GetAggregatedReportByCountryOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregatedReportByCountry not implemented")
}
func (UnimplementedHistoryServiceServer) GetSession(context.Context, *GetSessionIn) (*GameSessionOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedHistoryServiceServer) GetHosts(context.Context, *FinancialBase) (*DictionaryOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHosts not implemented")
}
func (UnimplementedHistoryServiceServer) GetCurrencies(context.Context, *FinancialBase) (*DictionaryOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencies not implemented")
}
func (UnimplementedHistoryServiceServer) GetIntegratorOperators(context.Context, *GamesIn) (*IntegratorsOperatorOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegratorOperators not implemented")
}
func (UnimplementedHistoryServiceServer) CreateSpin(context.Context, *SpinIn) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpin not implemented")
}
func (UnimplementedHistoryServiceServer) UpdateSpin(context.Context, *SpinIn) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpin not implemented")
}
func (UnimplementedHistoryServiceServer) GetSpin(context.Context, *GetSpinIn) (*GetSpinOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpin not implemented")
}
func (UnimplementedHistoryServiceServer) GetLastSpin(context.Context, *GetLastSpinIn) (*GetSpinOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastSpin not implemented")
}
func (UnimplementedHistoryServiceServer) GetLastNotShownSpins(context.Context, *GetLastSpinIn) (*GetLastSpinsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastNotShownSpins not implemented")
}
func (UnimplementedHistoryServiceServer) GetLastSpinByWager(context.Context, *GetLastSpinByWagerIn) (*GetSpinOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastSpinByWager not implemented")
}
func (UnimplementedHistoryServiceServer) GetSpinsPagination(context.Context, *GetSpinPaginationIn) (*GetSpinPaginationOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpinsPagination not implemented")
}
func (UnimplementedHistoryServiceServer) HealthCheck(HistoryService_HealthCheckServer) error {
	return status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedHistoryServiceServer) mustEmbedUnimplementedHistoryServiceServer() {}

// UnsafeHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HistoryServiceServer will
// result in compilation errors.
type UnsafeHistoryServiceServer interface {
	mustEmbedUnimplementedHistoryServiceServer()
}

func RegisterHistoryServiceServer(s grpc.ServiceRegistrar, srv HistoryServiceServer) {
	s.RegisterService(&HistoryService_ServiceDesc, srv)
}

func _HistoryService_GetSpins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinancialIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).GetSpins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/history.HistoryService/GetSpins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).GetSpins(ctx, req.(*GetFinancialIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinancialIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/history.HistoryService/GetSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).GetSessions(ctx, req.(*GetFinancialIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_GetAllSpins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinancialBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).GetAllSpins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/history.HistoryService/GetAllSpins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).GetAllSpins(ctx, req.(*FinancialBase))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_GetAllGameSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinancialBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).GetAllGameSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/history.HistoryService/GetAllGameSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).GetAllGameSession(ctx, req.(*FinancialBase))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_GetFinancialReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinancialBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).GetFinancialReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/history.HistoryService/GetFinancialReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).GetFinancialReport(ctx, req.(*FinancialBase))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_GetAggregatedReportByGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAggregatedReportFilters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).GetAggregatedReportByGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/history.HistoryService/GetAggregatedReportByGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).GetAggregatedReportByGame(ctx, req.(*GetAggregatedReportFilters))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_GetAggregatedReportByCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAggregatedReportFilters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).GetAggregatedReportByCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/history.HistoryService/GetAggregatedReportByCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).GetAggregatedReportByCountry(ctx, req.(*GetAggregatedReportFilters))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/history.HistoryService/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).GetSession(ctx, req.(*GetSessionIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_GetHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinancialBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).GetHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/history.HistoryService/GetHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).GetHosts(ctx, req.(*FinancialBase))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_GetCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinancialBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).GetCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/history.HistoryService/GetCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).GetCurrencies(ctx, req.(*FinancialBase))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_GetIntegratorOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GamesIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).GetIntegratorOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/history.HistoryService/GetIntegratorOperators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).GetIntegratorOperators(ctx, req.(*GamesIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_CreateSpin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpinIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).CreateSpin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/history.HistoryService/CreateSpin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).CreateSpin(ctx, req.(*SpinIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_UpdateSpin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpinIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).UpdateSpin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/history.HistoryService/UpdateSpin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).UpdateSpin(ctx, req.(*SpinIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_GetSpin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpinIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).GetSpin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/history.HistoryService/GetSpin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).GetSpin(ctx, req.(*GetSpinIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_GetLastSpin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastSpinIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).GetLastSpin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/history.HistoryService/GetLastSpin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).GetLastSpin(ctx, req.(*GetLastSpinIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_GetLastNotShownSpins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastSpinIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).GetLastNotShownSpins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/history.HistoryService/GetLastNotShownSpins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).GetLastNotShownSpins(ctx, req.(*GetLastSpinIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_GetLastSpinByWager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastSpinByWagerIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).GetLastSpinByWager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/history.HistoryService/GetLastSpinByWager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).GetLastSpinByWager(ctx, req.(*GetLastSpinByWagerIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_GetSpinsPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpinPaginationIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).GetSpinsPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/history.HistoryService/GetSpinsPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).GetSpinsPagination(ctx, req.(*GetSpinPaginationIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_HealthCheck_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HistoryServiceServer).HealthCheck(&historyServiceHealthCheckServer{stream})
}

type HistoryService_HealthCheckServer interface {
	Send(*Status) error
	Recv() (*Status, error)
	grpc.ServerStream
}

type historyServiceHealthCheckServer struct {
	grpc.ServerStream
}

func (x *historyServiceHealthCheckServer) Send(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *historyServiceHealthCheckServer) Recv() (*Status, error) {
	m := new(Status)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HistoryService_ServiceDesc is the grpc.ServiceDesc for HistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "history.HistoryService",
	HandlerType: (*HistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSpins",
			Handler:    _HistoryService_GetSpins_Handler,
		},
		{
			MethodName: "GetSessions",
			Handler:    _HistoryService_GetSessions_Handler,
		},
		{
			MethodName: "GetAllSpins",
			Handler:    _HistoryService_GetAllSpins_Handler,
		},
		{
			MethodName: "GetAllGameSession",
			Handler:    _HistoryService_GetAllGameSession_Handler,
		},
		{
			MethodName: "GetFinancialReport",
			Handler:    _HistoryService_GetFinancialReport_Handler,
		},
		{
			MethodName: "GetAggregatedReportByGame",
			Handler:    _HistoryService_GetAggregatedReportByGame_Handler,
		},
		{
			MethodName: "GetAggregatedReportByCountry",
			Handler:    _HistoryService_GetAggregatedReportByCountry_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _HistoryService_GetSession_Handler,
		},
		{
			MethodName: "GetHosts",
			Handler:    _HistoryService_GetHosts_Handler,
		},
		{
			MethodName: "GetCurrencies",
			Handler:    _HistoryService_GetCurrencies_Handler,
		},
		{
			MethodName: "GetIntegratorOperators",
			Handler:    _HistoryService_GetIntegratorOperators_Handler,
		},
		{
			MethodName: "CreateSpin",
			Handler:    _HistoryService_CreateSpin_Handler,
		},
		{
			MethodName: "UpdateSpin",
			Handler:    _HistoryService_UpdateSpin_Handler,
		},
		{
			MethodName: "GetSpin",
			Handler:    _HistoryService_GetSpin_Handler,
		},
		{
			MethodName: "GetLastSpin",
			Handler:    _HistoryService_GetLastSpin_Handler,
		},
		{
			MethodName: "GetLastNotShownSpins",
			Handler:    _HistoryService_GetLastNotShownSpins_Handler,
		},
		{
			MethodName: "GetLastSpinByWager",
			Handler:    _HistoryService_GetLastSpinByWager_Handler,
		},
		{
			MethodName: "GetSpinsPagination",
			Handler:    _HistoryService_GetSpinsPagination_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HealthCheck",
			Handler:       _HistoryService_HealthCheck_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/history/history.proto",
}
