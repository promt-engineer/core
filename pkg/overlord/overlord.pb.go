// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.28.2
// source: pkg/overlord/overlord.proto

package overlord

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{0}
}

func (x *Status) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetStateBySessionTokenIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken       string `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	WagerLevelsDivisor int64  `protobuf:"varint,2,opt,name=wager_levels_divisor,json=wagerLevelsDivisor,proto3" json:"wager_levels_divisor,omitempty"`
}

func (x *GetStateBySessionTokenIn) Reset() {
	*x = GetStateBySessionTokenIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateBySessionTokenIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateBySessionTokenIn) ProtoMessage() {}

func (x *GetStateBySessionTokenIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateBySessionTokenIn.ProtoReflect.Descriptor instead.
func (*GetStateBySessionTokenIn) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{1}
}

func (x *GetStateBySessionTokenIn) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *GetStateBySessionTokenIn) GetWagerLevelsDivisor() int64 {
	if x != nil {
		return x.WagerLevelsDivisor
	}
	return 0
}

type InitUserStateIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Integrator string `protobuf:"bytes,1,opt,name=integrator,proto3" json:"integrator,omitempty"`
	Game       string `protobuf:"bytes,2,opt,name=game,proto3" json:"game,omitempty"`
	Params     []byte `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *InitUserStateIn) Reset() {
	*x = InitUserStateIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitUserStateIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitUserStateIn) ProtoMessage() {}

func (x *InitUserStateIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitUserStateIn.ProtoReflect.Descriptor instead.
func (*InitUserStateIn) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{2}
}

func (x *InitUserStateIn) GetIntegrator() string {
	if x != nil {
		return x.Integrator
	}
	return ""
}

func (x *InitUserStateIn) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

func (x *InitUserStateIn) GetParams() []byte {
	if x != nil {
		return x.Params
	}
	return nil
}

type InitUserStateOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId              string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ExternalUserId      string   `protobuf:"bytes,2,opt,name=external_user_id,json=externalUserId,proto3" json:"external_user_id,omitempty"`
	Integrator          string   `protobuf:"bytes,3,opt,name=integrator,proto3" json:"integrator,omitempty"`
	Operator            string   `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
	Provider            string   `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	Game                string   `protobuf:"bytes,6,opt,name=game,proto3" json:"game,omitempty"`
	GameId              string   `protobuf:"bytes,7,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Username            string   `protobuf:"bytes,8,opt,name=username,proto3" json:"username,omitempty"`
	SessionToken        string   `protobuf:"bytes,9,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	Balance             int64    `protobuf:"varint,10,opt,name=balance,proto3" json:"balance,omitempty"`
	Currency            string   `protobuf:"bytes,11,opt,name=currency,proto3" json:"currency,omitempty"`
	FreeBets            []string `protobuf:"bytes,12,rep,name=free_bets,json=freeBets,proto3" json:"free_bets,omitempty"`
	DefaultWager        int64    `protobuf:"varint,13,opt,name=default_wager,json=defaultWager,proto3" json:"default_wager,omitempty"`
	CurrencyMultiplier  int64    `protobuf:"varint,14,opt,name=currency_multiplier,json=currencyMultiplier,proto3" json:"currency_multiplier,omitempty"`
	WagerLevels         []int64  `protobuf:"varint,15,rep,packed,name=wager_levels,json=wagerLevels,proto3" json:"wager_levels,omitempty"`
	IsDemo              bool     `protobuf:"varint,16,opt,name=isDemo,proto3" json:"isDemo,omitempty"`
	BuyBonus            bool     `protobuf:"varint,17,opt,name=buy_bonus,json=buyBonus,proto3" json:"buy_bonus,omitempty"`
	Gamble              bool     `protobuf:"varint,18,opt,name=gamble,proto3" json:"gamble,omitempty"`
	DoubleChance        bool     `protobuf:"varint,19,opt,name=double_chance,json=doubleChance,proto3" json:"double_chance,omitempty"`
	Rtp                 *int64   `protobuf:"varint,20,opt,name=rtp,proto3,oneof" json:"rtp,omitempty"`
	Volatility          *string  `protobuf:"bytes,21,opt,name=volatility,proto3,oneof" json:"volatility,omitempty"`
	AvailableRtp        []int64  `protobuf:"varint,22,rep,packed,name=available_rtp,json=availableRtp,proto3" json:"available_rtp,omitempty"`
	AvailableVolatility []string `protobuf:"bytes,23,rep,name=available_volatility,json=availableVolatility,proto3" json:"available_volatility,omitempty"`
	OnlineVolatility    bool     `protobuf:"varint,24,opt,name=online_volatility,json=onlineVolatility,proto3" json:"online_volatility,omitempty"`
	UserLocale          string   `protobuf:"bytes,25,opt,name=user_locale,json=userLocale,proto3" json:"user_locale,omitempty"`
	Jurisdiction        string   `protobuf:"bytes,26,opt,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	LobbyUrl            string   `protobuf:"bytes,27,opt,name=lobby_url,json=lobbyUrl,proto3" json:"lobby_url,omitempty"`
	ShowCheats          bool     `protobuf:"varint,28,opt,name=show_cheats,json=showCheats,proto3" json:"show_cheats,omitempty"`
	LowBalance          bool     `protobuf:"varint,29,opt,name=low_balance,json=lowBalance,proto3" json:"low_balance,omitempty"`
	ShortLink           bool     `protobuf:"varint,30,opt,name=short_link,json=shortLink,proto3" json:"short_link,omitempty"`
	GambleDoubleUp      int64    `protobuf:"varint,31,opt,name=gamble_double_up,json=gambleDoubleUp,proto3" json:"gamble_double_up,omitempty"`
	CurrencySynonym     string   `protobuf:"bytes,32,opt,name=currency_synonym,json=currencySynonym,proto3" json:"currency_synonym,omitempty"`
	MinWager            int64    `protobuf:"varint,33,opt,name=min_wager,json=minWager,proto3" json:"min_wager,omitempty"`
}

func (x *InitUserStateOut) Reset() {
	*x = InitUserStateOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitUserStateOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitUserStateOut) ProtoMessage() {}

func (x *InitUserStateOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitUserStateOut.ProtoReflect.Descriptor instead.
func (*InitUserStateOut) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{3}
}

func (x *InitUserStateOut) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *InitUserStateOut) GetExternalUserId() string {
	if x != nil {
		return x.ExternalUserId
	}
	return ""
}

func (x *InitUserStateOut) GetIntegrator() string {
	if x != nil {
		return x.Integrator
	}
	return ""
}

func (x *InitUserStateOut) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *InitUserStateOut) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *InitUserStateOut) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

func (x *InitUserStateOut) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *InitUserStateOut) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *InitUserStateOut) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *InitUserStateOut) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *InitUserStateOut) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *InitUserStateOut) GetFreeBets() []string {
	if x != nil {
		return x.FreeBets
	}
	return nil
}

func (x *InitUserStateOut) GetDefaultWager() int64 {
	if x != nil {
		return x.DefaultWager
	}
	return 0
}

func (x *InitUserStateOut) GetCurrencyMultiplier() int64 {
	if x != nil {
		return x.CurrencyMultiplier
	}
	return 0
}

func (x *InitUserStateOut) GetWagerLevels() []int64 {
	if x != nil {
		return x.WagerLevels
	}
	return nil
}

func (x *InitUserStateOut) GetIsDemo() bool {
	if x != nil {
		return x.IsDemo
	}
	return false
}

func (x *InitUserStateOut) GetBuyBonus() bool {
	if x != nil {
		return x.BuyBonus
	}
	return false
}

func (x *InitUserStateOut) GetGamble() bool {
	if x != nil {
		return x.Gamble
	}
	return false
}

func (x *InitUserStateOut) GetDoubleChance() bool {
	if x != nil {
		return x.DoubleChance
	}
	return false
}

func (x *InitUserStateOut) GetRtp() int64 {
	if x != nil && x.Rtp != nil {
		return *x.Rtp
	}
	return 0
}

func (x *InitUserStateOut) GetVolatility() string {
	if x != nil && x.Volatility != nil {
		return *x.Volatility
	}
	return ""
}

func (x *InitUserStateOut) GetAvailableRtp() []int64 {
	if x != nil {
		return x.AvailableRtp
	}
	return nil
}

func (x *InitUserStateOut) GetAvailableVolatility() []string {
	if x != nil {
		return x.AvailableVolatility
	}
	return nil
}

func (x *InitUserStateOut) GetOnlineVolatility() bool {
	if x != nil {
		return x.OnlineVolatility
	}
	return false
}

func (x *InitUserStateOut) GetUserLocale() string {
	if x != nil {
		return x.UserLocale
	}
	return ""
}

func (x *InitUserStateOut) GetJurisdiction() string {
	if x != nil {
		return x.Jurisdiction
	}
	return ""
}

func (x *InitUserStateOut) GetLobbyUrl() string {
	if x != nil {
		return x.LobbyUrl
	}
	return ""
}

func (x *InitUserStateOut) GetShowCheats() bool {
	if x != nil {
		return x.ShowCheats
	}
	return false
}

func (x *InitUserStateOut) GetLowBalance() bool {
	if x != nil {
		return x.LowBalance
	}
	return false
}

func (x *InitUserStateOut) GetShortLink() bool {
	if x != nil {
		return x.ShortLink
	}
	return false
}

func (x *InitUserStateOut) GetGambleDoubleUp() int64 {
	if x != nil {
		return x.GambleDoubleUp
	}
	return 0
}

func (x *InitUserStateOut) GetCurrencySynonym() string {
	if x != nil {
		return x.CurrencySynonym
	}
	return ""
}

func (x *InitUserStateOut) GetMinWager() int64 {
	if x != nil {
		return x.MinWager
	}
	return 0
}

type OpenBetIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken string `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	RoundId      string `protobuf:"bytes,2,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	Wager        int64  `protobuf:"varint,3,opt,name=wager,proto3" json:"wager,omitempty"`
	Award        int64  `protobuf:"varint,4,opt,name=award,proto3" json:"award,omitempty"`
}

func (x *OpenBetIn) Reset() {
	*x = OpenBetIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenBetIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenBetIn) ProtoMessage() {}

func (x *OpenBetIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenBetIn.ProtoReflect.Descriptor instead.
func (*OpenBetIn) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{4}
}

func (x *OpenBetIn) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *OpenBetIn) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *OpenBetIn) GetWager() int64 {
	if x != nil {
		return x.Wager
	}
	return 0
}

func (x *OpenBetIn) GetAward() int64 {
	if x != nil {
		return x.Award
	}
	return 0
}

type OpenFreeBetIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken string `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	FreeBetId    string `protobuf:"bytes,2,opt,name=free_bet_id,json=freeBetId,proto3" json:"free_bet_id,omitempty"`
	RoundId      string `protobuf:"bytes,3,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
}

func (x *OpenFreeBetIn) Reset() {
	*x = OpenFreeBetIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenFreeBetIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenFreeBetIn) ProtoMessage() {}

func (x *OpenFreeBetIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenFreeBetIn.ProtoReflect.Descriptor instead.
func (*OpenFreeBetIn) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{5}
}

func (x *OpenFreeBetIn) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *OpenFreeBetIn) GetFreeBetId() string {
	if x != nil {
		return x.FreeBetId
	}
	return ""
}

func (x *OpenFreeBetIn) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

type OpenBetOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Balance       int64  `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *OpenBetOut) Reset() {
	*x = OpenBetOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenBetOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenBetOut) ProtoMessage() {}

func (x *OpenBetOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenBetOut.ProtoReflect.Descriptor instead.
func (*OpenBetOut) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{6}
}

func (x *OpenBetOut) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *OpenBetOut) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type CloseBetIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Award         int64  `protobuf:"varint,2,opt,name=award,proto3" json:"award,omitempty"`
}

func (x *CloseBetIn) Reset() {
	*x = CloseBetIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseBetIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseBetIn) ProtoMessage() {}

func (x *CloseBetIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseBetIn.ProtoReflect.Descriptor instead.
func (*CloseBetIn) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{7}
}

func (x *CloseBetIn) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *CloseBetIn) GetAward() int64 {
	if x != nil {
		return x.Award
	}
	return 0
}

type RollbackIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *RollbackIn) Reset() {
	*x = RollbackIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackIn) ProtoMessage() {}

func (x *RollbackIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackIn.ProtoReflect.Descriptor instead.
func (*RollbackIn) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{8}
}

func (x *RollbackIn) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type RollbackOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance int64 `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *RollbackOut) Reset() {
	*x = RollbackOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackOut) ProtoMessage() {}

func (x *RollbackOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackOut.ProtoReflect.Descriptor instead.
func (*RollbackOut) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{9}
}

func (x *RollbackOut) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type CloseBetOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance int64 `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *CloseBetOut) Reset() {
	*x = CloseBetOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseBetOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseBetOut) ProtoMessage() {}

func (x *CloseBetOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseBetOut.ProtoReflect.Descriptor instead.
func (*CloseBetOut) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{10}
}

func (x *CloseBetOut) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type AtomicBetIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken string `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	FreeBetId    string `protobuf:"bytes,2,opt,name=free_bet_id,json=freeBetId,proto3" json:"free_bet_id,omitempty"`
	RoundId      string `protobuf:"bytes,3,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	Wager        int64  `protobuf:"varint,4,opt,name=wager,proto3" json:"wager,omitempty"`
	Award        int64  `protobuf:"varint,5,opt,name=award,proto3" json:"award,omitempty"`
	IsGamble     bool   `protobuf:"varint,6,opt,name=is_gamble,json=isGamble,proto3" json:"is_gamble,omitempty"`
}

func (x *AtomicBetIn) Reset() {
	*x = AtomicBetIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtomicBetIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtomicBetIn) ProtoMessage() {}

func (x *AtomicBetIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtomicBetIn.ProtoReflect.Descriptor instead.
func (*AtomicBetIn) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{11}
}

func (x *AtomicBetIn) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *AtomicBetIn) GetFreeBetId() string {
	if x != nil {
		return x.FreeBetId
	}
	return ""
}

func (x *AtomicBetIn) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *AtomicBetIn) GetWager() int64 {
	if x != nil {
		return x.Wager
	}
	return 0
}

func (x *AtomicBetIn) GetAward() int64 {
	if x != nil {
		return x.Award
	}
	return 0
}

func (x *AtomicBetIn) GetIsGamble() bool {
	if x != nil {
		return x.IsGamble
	}
	return false
}

type AtomicBetOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Balance       int64  `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *AtomicBetOut) Reset() {
	*x = AtomicBetOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtomicBetOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtomicBetOut) ProtoMessage() {}

func (x *AtomicBetOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtomicBetOut.ProtoReflect.Descriptor instead.
func (*AtomicBetOut) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{12}
}

func (x *AtomicBetOut) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *AtomicBetOut) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type GetAvailableFreeBetsIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken string `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
}

func (x *GetAvailableFreeBetsIn) Reset() {
	*x = GetAvailableFreeBetsIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableFreeBetsIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableFreeBetsIn) ProtoMessage() {}

func (x *GetAvailableFreeBetsIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableFreeBetsIn.ProtoReflect.Descriptor instead.
func (*GetAvailableFreeBetsIn) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{13}
}

func (x *GetAvailableFreeBetsIn) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

type GetAvailableFreeBetsOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreeBets []*FreeBet `protobuf:"bytes,1,rep,name=free_bets,json=freeBets,proto3" json:"free_bets,omitempty"`
}

func (x *GetAvailableFreeBetsOut) Reset() {
	*x = GetAvailableFreeBetsOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableFreeBetsOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableFreeBetsOut) ProtoMessage() {}

func (x *GetAvailableFreeBetsOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableFreeBetsOut.ProtoReflect.Descriptor instead.
func (*GetAvailableFreeBetsOut) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{14}
}

func (x *GetAvailableFreeBetsOut) GetFreeBets() []*FreeBet {
	if x != nil {
		return x.FreeBets
	}
	return nil
}

type FreeBetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bets []*FreeBet `protobuf:"bytes,1,rep,name=bets,proto3" json:"bets,omitempty"`
}

func (x *FreeBetList) Reset() {
	*x = FreeBetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreeBetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreeBetList) ProtoMessage() {}

func (x *FreeBetList) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreeBetList.ProtoReflect.Descriptor instead.
func (*FreeBetList) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{15}
}

func (x *FreeBetList) GetBets() []*FreeBet {
	if x != nil {
		return x.Bets
	}
	return nil
}

type GetAvailableFreeBetsWithIntegratorBetOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreeBets map[string]*FreeBetList `protobuf:"bytes,1,rep,name=free_bets,json=freeBets,proto3" json:"free_bets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetAvailableFreeBetsWithIntegratorBetOut) Reset() {
	*x = GetAvailableFreeBetsWithIntegratorBetOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableFreeBetsWithIntegratorBetOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableFreeBetsWithIntegratorBetOut) ProtoMessage() {}

func (x *GetAvailableFreeBetsWithIntegratorBetOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableFreeBetsWithIntegratorBetOut.ProtoReflect.Descriptor instead.
func (*GetAvailableFreeBetsWithIntegratorBetOut) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{16}
}

func (x *GetAvailableFreeBetsWithIntegratorBetOut) GetFreeBets() map[string]*FreeBetList {
	if x != nil {
		return x.FreeBets
	}
	return nil
}

type CancelAvailableFreeBetsIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken string `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
}

func (x *CancelAvailableFreeBetsIn) Reset() {
	*x = CancelAvailableFreeBetsIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelAvailableFreeBetsIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAvailableFreeBetsIn) ProtoMessage() {}

func (x *CancelAvailableFreeBetsIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAvailableFreeBetsIn.ProtoReflect.Descriptor instead.
func (*CancelAvailableFreeBetsIn) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{17}
}

func (x *CancelAvailableFreeBetsIn) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

type CancelAvailableFreeBetsByIntegratorBetIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken    string `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	IntegratorBetId string `protobuf:"bytes,2,opt,name=integrator_bet_id,json=integratorBetId,proto3" json:"integrator_bet_id,omitempty"`
}

func (x *CancelAvailableFreeBetsByIntegratorBetIn) Reset() {
	*x = CancelAvailableFreeBetsByIntegratorBetIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelAvailableFreeBetsByIntegratorBetIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAvailableFreeBetsByIntegratorBetIn) ProtoMessage() {}

func (x *CancelAvailableFreeBetsByIntegratorBetIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAvailableFreeBetsByIntegratorBetIn.ProtoReflect.Descriptor instead.
func (*CancelAvailableFreeBetsByIntegratorBetIn) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{18}
}

func (x *CancelAvailableFreeBetsByIntegratorBetIn) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *CancelAvailableFreeBetsByIntegratorBetIn) GetIntegratorBetId() string {
	if x != nil {
		return x.IntegratorBetId
	}
	return ""
}

type CancelAvailableFreeBetsOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CancelAvailableFreeBetsOut) Reset() {
	*x = CancelAvailableFreeBetsOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelAvailableFreeBetsOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAvailableFreeBetsOut) ProtoMessage() {}

func (x *CancelAvailableFreeBetsOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAvailableFreeBetsOut.ProtoReflect.Descriptor instead.
func (*CancelAvailableFreeBetsOut) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{19}
}

func (x *CancelAvailableFreeBetsOut) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetAvailableCurrenciesIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAvailableCurrenciesIn) Reset() {
	*x = GetAvailableCurrenciesIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableCurrenciesIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableCurrenciesIn) ProtoMessage() {}

func (x *GetAvailableCurrenciesIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableCurrenciesIn.ProtoReflect.Descriptor instead.
func (*GetAvailableCurrenciesIn) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{20}
}

type GetAvailableCurrenciesOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currencies []string `protobuf:"bytes,1,rep,name=currencies,proto3" json:"currencies,omitempty"`
}

func (x *GetAvailableCurrenciesOut) Reset() {
	*x = GetAvailableCurrenciesOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableCurrenciesOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableCurrenciesOut) ProtoMessage() {}

func (x *GetAvailableCurrenciesOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableCurrenciesOut.ProtoReflect.Descriptor instead.
func (*GetAvailableCurrenciesOut) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{21}
}

func (x *GetAvailableCurrenciesOut) GetCurrencies() []string {
	if x != nil {
		return x.Currencies
	}
	return nil
}

type FreeBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Game             string `protobuf:"bytes,2,opt,name=game,proto3" json:"game,omitempty"`
	Currency         string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Value            int64  `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	SpinCount        int32  `protobuf:"varint,5,opt,name=spin_count,json=spinCount,proto3" json:"spin_count,omitempty"`
	ExpireDate       int64  `protobuf:"varint,6,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	IntegratorUserId string `protobuf:"bytes,7,opt,name=integrator_user_id,json=integratorUserId,proto3" json:"integrator_user_id,omitempty"`
}

func (x *FreeBet) Reset() {
	*x = FreeBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreeBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreeBet) ProtoMessage() {}

func (x *FreeBet) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreeBet.ProtoReflect.Descriptor instead.
func (*FreeBet) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{22}
}

func (x *FreeBet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FreeBet) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

func (x *FreeBet) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *FreeBet) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *FreeBet) GetSpinCount() int32 {
	if x != nil {
		return x.SpinCount
	}
	return 0
}

func (x *FreeBet) GetExpireDate() int64 {
	if x != nil {
		return x.ExpireDate
	}
	return 0
}

func (x *FreeBet) GetIntegratorUserId() string {
	if x != nil {
		return x.IntegratorUserId
	}
	return ""
}

type AddFreeBetIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BetValue       int64  `protobuf:"varint,2,opt,name=bet_value,json=betValue,proto3" json:"bet_value,omitempty"`
	FreeBets       int32  `protobuf:"varint,3,opt,name=free_bets,json=freeBets,proto3" json:"free_bets,omitempty"`
	Currency       string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	EndDate        int64  `protobuf:"varint,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	FreeBetId      string `protobuf:"bytes,6,opt,name=free_bet_id,json=freeBetId,proto3" json:"free_bet_id,omitempty"`
	Game           string `protobuf:"bytes,7,opt,name=game,proto3" json:"game,omitempty"`
	Provider       string `protobuf:"bytes,8,opt,name=provider,proto3" json:"provider,omitempty"`
	IntegratorKey  string `protobuf:"bytes,9,opt,name=integrator_key,json=integratorKey,proto3" json:"integrator_key,omitempty"`
	SecretToken    string `protobuf:"bytes,10,opt,name=secret_token,json=secretToken,proto3" json:"secret_token,omitempty"`
	AdditionalData []byte `protobuf:"bytes,11,opt,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty"`
}

func (x *AddFreeBetIn) Reset() {
	*x = AddFreeBetIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFreeBetIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFreeBetIn) ProtoMessage() {}

func (x *AddFreeBetIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFreeBetIn.ProtoReflect.Descriptor instead.
func (*AddFreeBetIn) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{23}
}

func (x *AddFreeBetIn) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AddFreeBetIn) GetBetValue() int64 {
	if x != nil {
		return x.BetValue
	}
	return 0
}

func (x *AddFreeBetIn) GetFreeBets() int32 {
	if x != nil {
		return x.FreeBets
	}
	return 0
}

func (x *AddFreeBetIn) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *AddFreeBetIn) GetEndDate() int64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *AddFreeBetIn) GetFreeBetId() string {
	if x != nil {
		return x.FreeBetId
	}
	return ""
}

func (x *AddFreeBetIn) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

func (x *AddFreeBetIn) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *AddFreeBetIn) GetIntegratorKey() string {
	if x != nil {
		return x.IntegratorKey
	}
	return ""
}

func (x *AddFreeBetIn) GetSecretToken() string {
	if x != nil {
		return x.SecretToken
	}
	return ""
}

func (x *AddFreeBetIn) GetAdditionalData() []byte {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

type AddFreeBetOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Currency  string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	UserId    string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FreeBets  int32  `protobuf:"varint,5,opt,name=free_bets,json=freeBets,proto3" json:"free_bets,omitempty"`
	BetValue  int64  `protobuf:"varint,6,opt,name=bet_value,json=betValue,proto3" json:"bet_value,omitempty"`
	EndDate   int64  `protobuf:"varint,7,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	FreeBetId string `protobuf:"bytes,8,opt,name=free_bet_id,json=freeBetId,proto3" json:"free_bet_id,omitempty"`
	Game      string `protobuf:"bytes,9,opt,name=game,proto3" json:"game,omitempty"`
	Provider  string `protobuf:"bytes,10,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *AddFreeBetOut) Reset() {
	*x = AddFreeBetOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFreeBetOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFreeBetOut) ProtoMessage() {}

func (x *AddFreeBetOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFreeBetOut.ProtoReflect.Descriptor instead.
func (*AddFreeBetOut) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{24}
}

func (x *AddFreeBetOut) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddFreeBetOut) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddFreeBetOut) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *AddFreeBetOut) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AddFreeBetOut) GetFreeBets() int32 {
	if x != nil {
		return x.FreeBets
	}
	return 0
}

func (x *AddFreeBetOut) GetBetValue() int64 {
	if x != nil {
		return x.BetValue
	}
	return 0
}

func (x *AddFreeBetOut) GetEndDate() int64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *AddFreeBetOut) GetFreeBetId() string {
	if x != nil {
		return x.FreeBetId
	}
	return ""
}

func (x *AddFreeBetOut) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

func (x *AddFreeBetOut) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type CancelFreeBetIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreeBetId     string `protobuf:"bytes,1,opt,name=free_bet_id,json=freeBetId,proto3" json:"free_bet_id,omitempty"`
	UserId        string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IntegratorKey string `protobuf:"bytes,3,opt,name=integrator_key,json=integratorKey,proto3" json:"integrator_key,omitempty"`
	SecretToken   string `protobuf:"bytes,4,opt,name=secret_token,json=secretToken,proto3" json:"secret_token,omitempty"`
	Provider      string `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *CancelFreeBetIn) Reset() {
	*x = CancelFreeBetIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelFreeBetIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelFreeBetIn) ProtoMessage() {}

func (x *CancelFreeBetIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelFreeBetIn.ProtoReflect.Descriptor instead.
func (*CancelFreeBetIn) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{25}
}

func (x *CancelFreeBetIn) GetFreeBetId() string {
	if x != nil {
		return x.FreeBetId
	}
	return ""
}

func (x *CancelFreeBetIn) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CancelFreeBetIn) GetIntegratorKey() string {
	if x != nil {
		return x.IntegratorKey
	}
	return ""
}

func (x *CancelFreeBetIn) GetSecretToken() string {
	if x != nil {
		return x.SecretToken
	}
	return ""
}

func (x *CancelFreeBetIn) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type CancelFreeBetOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CancelFreeBetOut) Reset() {
	*x = CancelFreeBetOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelFreeBetOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelFreeBetOut) ProtoMessage() {}

func (x *CancelFreeBetOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelFreeBetOut.ProtoReflect.Descriptor instead.
func (*CancelFreeBetOut) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{26}
}

func (x *CancelFreeBetOut) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CancelFreeBetOut) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetIntegratorConfigIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Integrator string `protobuf:"bytes,1,opt,name=integrator,proto3" json:"integrator,omitempty"`
	Game       string `protobuf:"bytes,2,opt,name=game,proto3" json:"game,omitempty"`
}

func (x *GetIntegratorConfigIn) Reset() {
	*x = GetIntegratorConfigIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIntegratorConfigIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntegratorConfigIn) ProtoMessage() {}

func (x *GetIntegratorConfigIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntegratorConfigIn.ProtoReflect.Descriptor instead.
func (*GetIntegratorConfigIn) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{27}
}

func (x *GetIntegratorConfigIn) GetIntegrator() string {
	if x != nil {
		return x.Integrator
	}
	return ""
}

func (x *GetIntegratorConfigIn) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

type GetIntegratorConfigOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultWager int64            `protobuf:"varint,1,opt,name=default_wager,json=defaultWager,proto3" json:"default_wager,omitempty"`
	WagerLevels  []int64          `protobuf:"varint,2,rep,packed,name=wager_levels,json=wagerLevels,proto3" json:"wager_levels,omitempty"`
	Multipliers  map[string]int64 `protobuf:"bytes,3,rep,name=multipliers,proto3" json:"multipliers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetIntegratorConfigOut) Reset() {
	*x = GetIntegratorConfigOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIntegratorConfigOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntegratorConfigOut) ProtoMessage() {}

func (x *GetIntegratorConfigOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntegratorConfigOut.ProtoReflect.Descriptor instead.
func (*GetIntegratorConfigOut) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{28}
}

func (x *GetIntegratorConfigOut) GetDefaultWager() int64 {
	if x != nil {
		return x.DefaultWager
	}
	return 0
}

func (x *GetIntegratorConfigOut) GetWagerLevels() []int64 {
	if x != nil {
		return x.WagerLevels
	}
	return nil
}

func (x *GetIntegratorConfigOut) GetMultipliers() map[string]int64 {
	if x != nil {
		return x.Multipliers
	}
	return nil
}

type SaveParamsIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Integrator   string  `protobuf:"bytes,1,opt,name=integrator,proto3" json:"integrator,omitempty"`
	Game         string  `protobuf:"bytes,2,opt,name=game,proto3" json:"game,omitempty"`
	Rtp          *int64  `protobuf:"varint,3,opt,name=rtp,proto3,oneof" json:"rtp,omitempty"`
	Wagers       []int64 `protobuf:"varint,4,rep,packed,name=wagers,proto3" json:"wagers,omitempty"`
	BuyBonus     bool    `protobuf:"varint,5,opt,name=buy_bonus,json=buyBonus,proto3" json:"buy_bonus,omitempty"`
	Gamble       bool    `protobuf:"varint,6,opt,name=gamble,proto3" json:"gamble,omitempty"`
	DoubleChance bool    `protobuf:"varint,7,opt,name=double_chance,json=doubleChance,proto3" json:"double_chance,omitempty"`
	SessionId    string  `protobuf:"bytes,8,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Volatility   *string `protobuf:"bytes,9,opt,name=volatility,proto3,oneof" json:"volatility,omitempty"`
	IsDemo       bool    `protobuf:"varint,10,opt,name=is_demo,json=isDemo,proto3" json:"is_demo,omitempty"`
	Currency     string  `protobuf:"bytes,11,opt,name=currency,proto3" json:"currency,omitempty"`
	UserId       string  `protobuf:"bytes,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserLocale   string  `protobuf:"bytes,13,opt,name=user_locale,json=userLocale,proto3" json:"user_locale,omitempty"`
	DefaultWager *int64  `protobuf:"varint,14,opt,name=default_wager,json=defaultWager,proto3,oneof" json:"default_wager,omitempty"`
	Jurisdiction string  `protobuf:"bytes,15,opt,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	LobbyUrl     string  `protobuf:"bytes,16,opt,name=lobby_url,json=lobbyUrl,proto3" json:"lobby_url,omitempty"`
	ShowCheats   bool    `protobuf:"varint,17,opt,name=show_cheats,json=showCheats,proto3" json:"show_cheats,omitempty"`
	LowBalance   bool    `protobuf:"varint,18,opt,name=low_balance,json=lowBalance,proto3" json:"low_balance,omitempty"`
	ShortLink    bool    `protobuf:"varint,19,opt,name=short_link,json=shortLink,proto3" json:"short_link,omitempty"`
}

func (x *SaveParamsIn) Reset() {
	*x = SaveParamsIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveParamsIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveParamsIn) ProtoMessage() {}

func (x *SaveParamsIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveParamsIn.ProtoReflect.Descriptor instead.
func (*SaveParamsIn) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{29}
}

func (x *SaveParamsIn) GetIntegrator() string {
	if x != nil {
		return x.Integrator
	}
	return ""
}

func (x *SaveParamsIn) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

func (x *SaveParamsIn) GetRtp() int64 {
	if x != nil && x.Rtp != nil {
		return *x.Rtp
	}
	return 0
}

func (x *SaveParamsIn) GetWagers() []int64 {
	if x != nil {
		return x.Wagers
	}
	return nil
}

func (x *SaveParamsIn) GetBuyBonus() bool {
	if x != nil {
		return x.BuyBonus
	}
	return false
}

func (x *SaveParamsIn) GetGamble() bool {
	if x != nil {
		return x.Gamble
	}
	return false
}

func (x *SaveParamsIn) GetDoubleChance() bool {
	if x != nil {
		return x.DoubleChance
	}
	return false
}

func (x *SaveParamsIn) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SaveParamsIn) GetVolatility() string {
	if x != nil && x.Volatility != nil {
		return *x.Volatility
	}
	return ""
}

func (x *SaveParamsIn) GetIsDemo() bool {
	if x != nil {
		return x.IsDemo
	}
	return false
}

func (x *SaveParamsIn) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *SaveParamsIn) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SaveParamsIn) GetUserLocale() string {
	if x != nil {
		return x.UserLocale
	}
	return ""
}

func (x *SaveParamsIn) GetDefaultWager() int64 {
	if x != nil && x.DefaultWager != nil {
		return *x.DefaultWager
	}
	return 0
}

func (x *SaveParamsIn) GetJurisdiction() string {
	if x != nil {
		return x.Jurisdiction
	}
	return ""
}

func (x *SaveParamsIn) GetLobbyUrl() string {
	if x != nil {
		return x.LobbyUrl
	}
	return ""
}

func (x *SaveParamsIn) GetShowCheats() bool {
	if x != nil {
		return x.ShowCheats
	}
	return false
}

func (x *SaveParamsIn) GetLowBalance() bool {
	if x != nil {
		return x.LowBalance
	}
	return false
}

func (x *SaveParamsIn) GetShortLink() bool {
	if x != nil {
		return x.ShortLink
	}
	return false
}

type SaveParamsOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SaveParamsOut) Reset() {
	*x = SaveParamsOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveParamsOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveParamsOut) ProtoMessage() {}

func (x *SaveParamsOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveParamsOut.ProtoReflect.Descriptor instead.
func (*SaveParamsOut) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{30}
}

type GetParamsIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Integrator string `protobuf:"bytes,1,opt,name=integrator,proto3" json:"integrator,omitempty"`
	Game       string `protobuf:"bytes,2,opt,name=game,proto3" json:"game,omitempty"`
	SessionId  string `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *GetParamsIn) Reset() {
	*x = GetParamsIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetParamsIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParamsIn) ProtoMessage() {}

func (x *GetParamsIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParamsIn.ProtoReflect.Descriptor instead.
func (*GetParamsIn) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{31}
}

func (x *GetParamsIn) GetIntegrator() string {
	if x != nil {
		return x.Integrator
	}
	return ""
}

func (x *GetParamsIn) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

func (x *GetParamsIn) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type GetParamsOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rtp          *int64  `protobuf:"varint,1,opt,name=rtp,proto3,oneof" json:"rtp,omitempty"`
	Wagers       []int64 `protobuf:"varint,2,rep,packed,name=wagers,proto3" json:"wagers,omitempty"`
	BuyBonus     bool    `protobuf:"varint,3,opt,name=buy_bonus,json=buyBonus,proto3" json:"buy_bonus,omitempty"`
	Gamble       bool    `protobuf:"varint,4,opt,name=gamble,proto3" json:"gamble,omitempty"`
	DoubleChance bool    `protobuf:"varint,5,opt,name=double_chance,json=doubleChance,proto3" json:"double_chance,omitempty"`
	Volatility   *string `protobuf:"bytes,6,opt,name=volatility,proto3,oneof" json:"volatility,omitempty"`
	IsDemo       bool    `protobuf:"varint,7,opt,name=is_demo,json=isDemo,proto3" json:"is_demo,omitempty"`
	Currency     string  `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
	UserId       string  `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserLocale   string  `protobuf:"bytes,10,opt,name=user_locale,json=userLocale,proto3" json:"user_locale,omitempty"`
	DefaultWager *int64  `protobuf:"varint,11,opt,name=default_wager,json=defaultWager,proto3,oneof" json:"default_wager,omitempty"`
	Jurisdiction string  `protobuf:"bytes,12,opt,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	LobbyUrl     string  `protobuf:"bytes,13,opt,name=lobby_url,json=lobbyUrl,proto3" json:"lobby_url,omitempty"`
	ShowCheats   bool    `protobuf:"varint,14,opt,name=show_cheats,json=showCheats,proto3" json:"show_cheats,omitempty"`
	LowBalance   bool    `protobuf:"varint,15,opt,name=low_balance,json=lowBalance,proto3" json:"low_balance,omitempty"`
	ShortLink    bool    `protobuf:"varint,16,opt,name=short_link,json=shortLink,proto3" json:"short_link,omitempty"`
}

func (x *GetParamsOut) Reset() {
	*x = GetParamsOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetParamsOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParamsOut) ProtoMessage() {}

func (x *GetParamsOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParamsOut.ProtoReflect.Descriptor instead.
func (*GetParamsOut) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{32}
}

func (x *GetParamsOut) GetRtp() int64 {
	if x != nil && x.Rtp != nil {
		return *x.Rtp
	}
	return 0
}

func (x *GetParamsOut) GetWagers() []int64 {
	if x != nil {
		return x.Wagers
	}
	return nil
}

func (x *GetParamsOut) GetBuyBonus() bool {
	if x != nil {
		return x.BuyBonus
	}
	return false
}

func (x *GetParamsOut) GetGamble() bool {
	if x != nil {
		return x.Gamble
	}
	return false
}

func (x *GetParamsOut) GetDoubleChance() bool {
	if x != nil {
		return x.DoubleChance
	}
	return false
}

func (x *GetParamsOut) GetVolatility() string {
	if x != nil && x.Volatility != nil {
		return *x.Volatility
	}
	return ""
}

func (x *GetParamsOut) GetIsDemo() bool {
	if x != nil {
		return x.IsDemo
	}
	return false
}

func (x *GetParamsOut) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *GetParamsOut) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetParamsOut) GetUserLocale() string {
	if x != nil {
		return x.UserLocale
	}
	return ""
}

func (x *GetParamsOut) GetDefaultWager() int64 {
	if x != nil && x.DefaultWager != nil {
		return *x.DefaultWager
	}
	return 0
}

func (x *GetParamsOut) GetJurisdiction() string {
	if x != nil {
		return x.Jurisdiction
	}
	return ""
}

func (x *GetParamsOut) GetLobbyUrl() string {
	if x != nil {
		return x.LobbyUrl
	}
	return ""
}

func (x *GetParamsOut) GetShowCheats() bool {
	if x != nil {
		return x.ShowCheats
	}
	return false
}

func (x *GetParamsOut) GetLowBalance() bool {
	if x != nil {
		return x.LowBalance
	}
	return false
}

func (x *GetParamsOut) GetShortLink() bool {
	if x != nil {
		return x.ShortLink
	}
	return false
}

type GetIntegratorFreeSpinsByIDIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Integrator string `protobuf:"bytes,1,opt,name=integrator,proto3" json:"integrator,omitempty"`
	FreeSpinId string `protobuf:"bytes,2,opt,name=free_spin_id,json=freeSpinId,proto3" json:"free_spin_id,omitempty"`
}

func (x *GetIntegratorFreeSpinsByIDIn) Reset() {
	*x = GetIntegratorFreeSpinsByIDIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIntegratorFreeSpinsByIDIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntegratorFreeSpinsByIDIn) ProtoMessage() {}

func (x *GetIntegratorFreeSpinsByIDIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntegratorFreeSpinsByIDIn.ProtoReflect.Descriptor instead.
func (*GetIntegratorFreeSpinsByIDIn) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{33}
}

func (x *GetIntegratorFreeSpinsByIDIn) GetIntegrator() string {
	if x != nil {
		return x.Integrator
	}
	return ""
}

func (x *GetIntegratorFreeSpinsByIDIn) GetFreeSpinId() string {
	if x != nil {
		return x.FreeSpinId
	}
	return ""
}

type SaveDefaultWagerInFreeBetValueIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken string `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	Id           string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Value        int64  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SaveDefaultWagerInFreeBetValueIn) Reset() {
	*x = SaveDefaultWagerInFreeBetValueIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveDefaultWagerInFreeBetValueIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveDefaultWagerInFreeBetValueIn) ProtoMessage() {}

func (x *SaveDefaultWagerInFreeBetValueIn) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveDefaultWagerInFreeBetValueIn.ProtoReflect.Descriptor instead.
func (*SaveDefaultWagerInFreeBetValueIn) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{34}
}

func (x *SaveDefaultWagerInFreeBetValueIn) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *SaveDefaultWagerInFreeBetValueIn) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SaveDefaultWagerInFreeBetValueIn) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SaveDefaultWagerInFreeBetValueOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SaveDefaultWagerInFreeBetValueOut) Reset() {
	*x = SaveDefaultWagerInFreeBetValueOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_overlord_overlord_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveDefaultWagerInFreeBetValueOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveDefaultWagerInFreeBetValueOut) ProtoMessage() {}

func (x *SaveDefaultWagerInFreeBetValueOut) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_overlord_overlord_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveDefaultWagerInFreeBetValueOut.ProtoReflect.Descriptor instead.
func (*SaveDefaultWagerInFreeBetValueOut) Descriptor() ([]byte, []int) {
	return file_pkg_overlord_overlord_proto_rawDescGZIP(), []int{35}
}

func (x *SaveDefaultWagerInFreeBetValueOut) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_pkg_overlord_overlord_proto protoreflect.FileDescriptor

var file_pkg_overlord_overlord_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x6b, 0x67, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2f, 0x6f,
	0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6f,
	0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x22, 0x20, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x71, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x61,
	0x67, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x77, 0x61, 0x67, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x44, 0x69, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x22, 0x5d, 0x0a, 0x0f,
	0x49, 0x6e, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xe6, 0x08, 0x0a, 0x10,
	0x49, 0x6e, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x67,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x77, 0x61, 0x67, 0x65, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x67, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44, 0x65, 0x6d, 0x6f, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x65, 0x6d, 0x6f, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x75, 0x79, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x62, 0x75, 0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61,
	0x6d, 0x62, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x62,
	0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x72, 0x74, 0x70, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x03, 0x72, 0x74, 0x70, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x72, 0x74, 0x70, 0x18, 0x16, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x74, 0x70, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6a, 0x75, 0x72,
	0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x68, 0x65, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x6f, 0x77, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x67,
	0x61, 0x6d, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x55, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x61, 0x67, 0x65, 0x72, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x57, 0x61, 0x67, 0x65, 0x72, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x72, 0x74, 0x70, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x22, 0x77, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x65, 0x74, 0x49,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x77, 0x61, 0x67, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x77, 0x61, 0x72, 0x64, 0x22, 0x6f, 0x0a,
	0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65, 0x42, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x4d,
	0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x49, 0x0a,
	0x0a, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x61, 0x77, 0x61, 0x72, 0x64, 0x22, 0x33, 0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x27, 0x0a,
	0x0b, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x27, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42,
	0x65, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0xb6, 0x01, 0x0a, 0x0b, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65, 0x42,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x61, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x77, 0x61, 0x67, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x67, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x47, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x22, 0x4f, 0x0a, 0x0c, 0x41, 0x74, 0x6f, 0x6d,
	0x69, 0x63, 0x42, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x3d, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74,
	0x73, 0x49, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x49, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x73,
	0x4f, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x42,
	0x65, 0x74, 0x73, 0x22, 0x34, 0x0a, 0x0b, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x62, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x46, 0x72, 0x65, 0x65,
	0x42, 0x65, 0x74, 0x52, 0x04, 0x62, 0x65, 0x74, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x28, 0x47, 0x65,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65,
	0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x42, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x5d, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x76, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x2e, 0x46, 0x72,
	0x65, 0x65, 0x42, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x66, 0x72, 0x65,
	0x65, 0x42, 0x65, 0x74, 0x73, 0x1a, 0x52, 0x0a, 0x0d, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f,
	0x72, 0x64, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40, 0x0a, 0x19, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x65, 0x65,
	0x42, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7b, 0x0a, 0x28, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72,
	0x65, 0x65, 0x42, 0x65, 0x74, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x42, 0x65, 0x74, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x1a, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x65, 0x65, 0x42,
	0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1a,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x22, 0x3b, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x07, 0x46, 0x72, 0x65, 0x65,
	0x42, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x70, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xdb, 0x02, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x46,
	0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x97, 0x02, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x46, 0x72, 0x65,
	0x65, 0x42, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72,
	0x65, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66,
	0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1e, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22,
	0xb0, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65,
	0x74, 0x49, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65, 0x42, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x22, 0x40, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x72, 0x65, 0x65,
	0x42, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x4b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x61, 0x6d,
	0x65, 0x22, 0xf5, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x77, 0x61, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x12, 0x53, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x76, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x75, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf3, 0x04, 0x0a, 0x0c, 0x53, 0x61,
	0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x15,
	0x0a, 0x03, 0x72, 0x74, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x03, 0x72,
	0x74, 0x70, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x61, 0x67, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x77, 0x61, 0x67, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x75, 0x79, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x62, 0x75, 0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61,
	0x6d, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x62,
	0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x76, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x44, 0x65, 0x6d, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x77, 0x61, 0x67, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x02, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x61, 0x67, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6a, 0x75, 0x72, 0x69,
	0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x68,
	0x65, 0x61, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77,
	0x43, 0x68, 0x65, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x6f, 0x77,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x72, 0x74, 0x70, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x77, 0x61, 0x67, 0x65, 0x72, 0x22,
	0x0f, 0x0a, 0x0d, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4f, 0x75, 0x74,
	0x22, 0x60, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xa0, 0x04, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x4f, 0x75, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x72, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x03, 0x72, 0x74, 0x70, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x61,
	0x67, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x77, 0x61, 0x67, 0x65,
	0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x75, 0x79, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x67, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0a,
	0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x65, 0x6d, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x77, 0x61, 0x67, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x57, 0x61, 0x67, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0c, 0x6a, 0x75,
	0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x43, 0x68, 0x65, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x72, 0x74, 0x70, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x77, 0x61, 0x67, 0x65, 0x72, 0x22, 0x60, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x69, 0x6e, 0x73, 0x42,
	0x79, 0x49, 0x44, 0x49, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x70,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x65,
	0x65, 0x53, 0x70, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x20, 0x53, 0x61, 0x76, 0x65, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x61, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x46, 0x72, 0x65,
	0x65, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3b, 0x0a, 0x21, 0x53, 0x61, 0x76, 0x65, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x61, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x46, 0x72, 0x65, 0x65,
	0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x32, 0x9c, 0x0d, 0x0a, 0x08, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64,
	0x12, 0x48, 0x0a, 0x0d, 0x49, 0x6e, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x49, 0x6e, 0x69,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x1a, 0x1a, 0x2e, 0x6f,
	0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x1a, 0x1a, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x65,
	0x74, 0x12, 0x13, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x1a, 0x14, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x12, 0x17, 0x2e,
	0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x72, 0x65,
	0x65, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x1a, 0x14, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x39,
	0x0a, 0x08, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x6f, 0x76, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x65, 0x74, 0x49, 0x6e,
	0x1a, 0x15, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x42, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0b, 0x52, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x1a, 0x15,
	0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x09, 0x41, 0x74, 0x6f, 0x6d, 0x69,
	0x63, 0x42, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e,
	0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x1a, 0x16, 0x2e, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x42, 0x65, 0x74,
	0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x22, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x49, 0x6e, 0x1a, 0x23, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1f, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x6e, 0x1a, 0x20, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x73, 0x12, 0x20,
	0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x73, 0x49, 0x6e,
	0x1a, 0x21, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x73,
	0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x17, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x73,
	0x12, 0x23, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x65, 0x65, 0x42,
	0x65, 0x74, 0x73, 0x49, 0x6e, 0x1a, 0x24, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x7f, 0x0a,
	0x25, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x65,
	0x65, 0x42, 0x65, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x42, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72,
	0x64, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72,
	0x65, 0x65, 0x42, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x1a, 0x32, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x84,
	0x01, 0x0a, 0x26, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x65, 0x74, 0x12, 0x32, 0x2e, 0x6f, 0x76, 0x65, 0x72,
	0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x73, 0x42, 0x79, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x1a, 0x24, 0x2e,
	0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x73,
	0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x65, 0x65, 0x53, 0x70, 0x69, 0x6e, 0x73, 0x42,
	0x79, 0x49, 0x44, 0x12, 0x26, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x72, 0x65, 0x65,
	0x53, 0x70, 0x69, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x44, 0x49, 0x6e, 0x1a, 0x21, 0x2e, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x22, 0x00,
	0x12, 0x7b, 0x0a, 0x1e, 0x53, 0x61, 0x76, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2a, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x53, 0x61,
	0x76, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x61, 0x67, 0x65, 0x72, 0x49, 0x6e,
	0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x1a, 0x2b,
	0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x61, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x46, 0x72, 0x65, 0x65,
	0x42, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x40, 0x0a,
	0x0b, 0x41, 0x64, 0x64, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x6f,
	0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x72, 0x65, 0x65, 0x42,
	0x65, 0x74, 0x49, 0x6e, 0x1a, 0x17, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e,
	0x41, 0x64, 0x64, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74,
	0x73, 0x12, 0x19, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x1a, 0x1a, 0x2e, 0x6f,
	0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x72,
	0x65, 0x65, 0x42, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0a, 0x53, 0x61,
	0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e,
	0x1a, 0x17, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x53, 0x61, 0x76, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x15, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x1a,
	0x16, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x4f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0b, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x10, 0x2e, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x6f, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x10, 0x2e, 0x6f, 0x76, 0x65,
	0x72, 0x6c, 0x6f, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x72, 0x64,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_overlord_overlord_proto_rawDescOnce sync.Once
	file_pkg_overlord_overlord_proto_rawDescData = file_pkg_overlord_overlord_proto_rawDesc
)

func file_pkg_overlord_overlord_proto_rawDescGZIP() []byte {
	file_pkg_overlord_overlord_proto_rawDescOnce.Do(func() {
		file_pkg_overlord_overlord_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_overlord_overlord_proto_rawDescData)
	})
	return file_pkg_overlord_overlord_proto_rawDescData
}

var file_pkg_overlord_overlord_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_pkg_overlord_overlord_proto_goTypes = []interface{}{
	(*Status)(nil),                                   // 0: overlord.Status
	(*GetStateBySessionTokenIn)(nil),                 // 1: overlord.GetStateBySessionTokenIn
	(*InitUserStateIn)(nil),                          // 2: overlord.InitUserStateIn
	(*InitUserStateOut)(nil),                         // 3: overlord.InitUserStateOut
	(*OpenBetIn)(nil),                                // 4: overlord.OpenBetIn
	(*OpenFreeBetIn)(nil),                            // 5: overlord.OpenFreeBetIn
	(*OpenBetOut)(nil),                               // 6: overlord.OpenBetOut
	(*CloseBetIn)(nil),                               // 7: overlord.CloseBetIn
	(*RollbackIn)(nil),                               // 8: overlord.RollbackIn
	(*RollbackOut)(nil),                              // 9: overlord.RollbackOut
	(*CloseBetOut)(nil),                              // 10: overlord.CloseBetOut
	(*AtomicBetIn)(nil),                              // 11: overlord.AtomicBetIn
	(*AtomicBetOut)(nil),                             // 12: overlord.AtomicBetOut
	(*GetAvailableFreeBetsIn)(nil),                   // 13: overlord.GetAvailableFreeBetsIn
	(*GetAvailableFreeBetsOut)(nil),                  // 14: overlord.GetAvailableFreeBetsOut
	(*FreeBetList)(nil),                              // 15: overlord.FreeBetList
	(*GetAvailableFreeBetsWithIntegratorBetOut)(nil), // 16: overlord.GetAvailableFreeBetsWithIntegratorBetOut
	(*CancelAvailableFreeBetsIn)(nil),                // 17: overlord.CancelAvailableFreeBetsIn
	(*CancelAvailableFreeBetsByIntegratorBetIn)(nil), // 18: overlord.CancelAvailableFreeBetsByIntegratorBetIn
	(*CancelAvailableFreeBetsOut)(nil),               // 19: overlord.CancelAvailableFreeBetsOut
	(*GetAvailableCurrenciesIn)(nil),                 // 20: overlord.GetAvailableCurrenciesIn
	(*GetAvailableCurrenciesOut)(nil),                // 21: overlord.GetAvailableCurrenciesOut
	(*FreeBet)(nil),                                  // 22: overlord.FreeBet
	(*AddFreeBetIn)(nil),                             // 23: overlord.AddFreeBetIn
	(*AddFreeBetOut)(nil),                            // 24: overlord.AddFreeBetOut
	(*CancelFreeBetIn)(nil),                          // 25: overlord.CancelFreeBetIn
	(*CancelFreeBetOut)(nil),                         // 26: overlord.CancelFreeBetOut
	(*GetIntegratorConfigIn)(nil),                    // 27: overlord.GetIntegratorConfigIn
	(*GetIntegratorConfigOut)(nil),                   // 28: overlord.GetIntegratorConfigOut
	(*SaveParamsIn)(nil),                             // 29: overlord.SaveParamsIn
	(*SaveParamsOut)(nil),                            // 30: overlord.SaveParamsOut
	(*GetParamsIn)(nil),                              // 31: overlord.GetParamsIn
	(*GetParamsOut)(nil),                             // 32: overlord.GetParamsOut
	(*GetIntegratorFreeSpinsByIDIn)(nil),             // 33: overlord.GetIntegratorFreeSpinsByIDIn
	(*SaveDefaultWagerInFreeBetValueIn)(nil),         // 34: overlord.SaveDefaultWagerInFreeBetValueIn
	(*SaveDefaultWagerInFreeBetValueOut)(nil),        // 35: overlord.SaveDefaultWagerInFreeBetValueOut
	nil, // 36: overlord.GetAvailableFreeBetsWithIntegratorBetOut.FreeBetsEntry
	nil, // 37: overlord.GetIntegratorConfigOut.MultipliersEntry
}
var file_pkg_overlord_overlord_proto_depIdxs = []int32{
	22, // 0: overlord.GetAvailableFreeBetsOut.free_bets:type_name -> overlord.FreeBet
	22, // 1: overlord.FreeBetList.bets:type_name -> overlord.FreeBet
	36, // 2: overlord.GetAvailableFreeBetsWithIntegratorBetOut.free_bets:type_name -> overlord.GetAvailableFreeBetsWithIntegratorBetOut.FreeBetsEntry
	37, // 3: overlord.GetIntegratorConfigOut.multipliers:type_name -> overlord.GetIntegratorConfigOut.MultipliersEntry
	15, // 4: overlord.GetAvailableFreeBetsWithIntegratorBetOut.FreeBetsEntry.value:type_name -> overlord.FreeBetList
	2,  // 5: overlord.Overlord.InitUserState:input_type -> overlord.InitUserStateIn
	1,  // 6: overlord.Overlord.GetStateBySessionToken:input_type -> overlord.GetStateBySessionTokenIn
	4,  // 7: overlord.Overlord.OpenBet:input_type -> overlord.OpenBetIn
	5,  // 8: overlord.Overlord.OpenFreeBet:input_type -> overlord.OpenFreeBetIn
	7,  // 9: overlord.Overlord.CloseBet:input_type -> overlord.CloseBetIn
	8,  // 10: overlord.Overlord.RollbackBet:input_type -> overlord.RollbackIn
	11, // 11: overlord.Overlord.AtomicBet:input_type -> overlord.AtomicBetIn
	20, // 12: overlord.Overlord.GetAvailableCurrencies:input_type -> overlord.GetAvailableCurrenciesIn
	27, // 13: overlord.Overlord.GetIntegratorConfig:input_type -> overlord.GetIntegratorConfigIn
	13, // 14: overlord.Overlord.GetAvailableFreeBets:input_type -> overlord.GetAvailableFreeBetsIn
	17, // 15: overlord.Overlord.CancelAvailableFreeBets:input_type -> overlord.CancelAvailableFreeBetsIn
	13, // 16: overlord.Overlord.GetAvailableFreeBetsWithIntegratorBet:input_type -> overlord.GetAvailableFreeBetsIn
	18, // 17: overlord.Overlord.CancelAvailableFreeBetsByIntegratorBet:input_type -> overlord.CancelAvailableFreeBetsByIntegratorBetIn
	33, // 18: overlord.Overlord.GetIntegratorFreeSpinsByID:input_type -> overlord.GetIntegratorFreeSpinsByIDIn
	34, // 19: overlord.Overlord.SaveDefaultWagerInFreeBetValue:input_type -> overlord.SaveDefaultWagerInFreeBetValueIn
	23, // 20: overlord.Overlord.AddFreeBets:input_type -> overlord.AddFreeBetIn
	25, // 21: overlord.Overlord.CancelFreeBets:input_type -> overlord.CancelFreeBetIn
	29, // 22: overlord.Overlord.SaveParams:input_type -> overlord.SaveParamsIn
	31, // 23: overlord.Overlord.GetParams:input_type -> overlord.GetParamsIn
	0,  // 24: overlord.Overlord.HealthCheck:input_type -> overlord.Status
	3,  // 25: overlord.Overlord.InitUserState:output_type -> overlord.InitUserStateOut
	3,  // 26: overlord.Overlord.GetStateBySessionToken:output_type -> overlord.InitUserStateOut
	6,  // 27: overlord.Overlord.OpenBet:output_type -> overlord.OpenBetOut
	6,  // 28: overlord.Overlord.OpenFreeBet:output_type -> overlord.OpenBetOut
	10, // 29: overlord.Overlord.CloseBet:output_type -> overlord.CloseBetOut
	9,  // 30: overlord.Overlord.RollbackBet:output_type -> overlord.RollbackOut
	12, // 31: overlord.Overlord.AtomicBet:output_type -> overlord.AtomicBetOut
	21, // 32: overlord.Overlord.GetAvailableCurrencies:output_type -> overlord.GetAvailableCurrenciesOut
	28, // 33: overlord.Overlord.GetIntegratorConfig:output_type -> overlord.GetIntegratorConfigOut
	14, // 34: overlord.Overlord.GetAvailableFreeBets:output_type -> overlord.GetAvailableFreeBetsOut
	19, // 35: overlord.Overlord.CancelAvailableFreeBets:output_type -> overlord.CancelAvailableFreeBetsOut
	16, // 36: overlord.Overlord.GetAvailableFreeBetsWithIntegratorBet:output_type -> overlord.GetAvailableFreeBetsWithIntegratorBetOut
	19, // 37: overlord.Overlord.CancelAvailableFreeBetsByIntegratorBet:output_type -> overlord.CancelAvailableFreeBetsOut
	14, // 38: overlord.Overlord.GetIntegratorFreeSpinsByID:output_type -> overlord.GetAvailableFreeBetsOut
	35, // 39: overlord.Overlord.SaveDefaultWagerInFreeBetValue:output_type -> overlord.SaveDefaultWagerInFreeBetValueOut
	24, // 40: overlord.Overlord.AddFreeBets:output_type -> overlord.AddFreeBetOut
	26, // 41: overlord.Overlord.CancelFreeBets:output_type -> overlord.CancelFreeBetOut
	30, // 42: overlord.Overlord.SaveParams:output_type -> overlord.SaveParamsOut
	32, // 43: overlord.Overlord.GetParams:output_type -> overlord.GetParamsOut
	0,  // 44: overlord.Overlord.HealthCheck:output_type -> overlord.Status
	25, // [25:45] is the sub-list for method output_type
	5,  // [5:25] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_pkg_overlord_overlord_proto_init() }
func file_pkg_overlord_overlord_proto_init() {
	if File_pkg_overlord_overlord_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_overlord_overlord_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateBySessionTokenIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitUserStateIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitUserStateOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenBetIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenFreeBetIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenBetOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseBetIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseBetOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AtomicBetIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AtomicBetOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableFreeBetsIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableFreeBetsOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreeBetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableFreeBetsWithIntegratorBetOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelAvailableFreeBetsIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelAvailableFreeBetsByIntegratorBetIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelAvailableFreeBetsOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableCurrenciesIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableCurrenciesOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreeBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFreeBetIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFreeBetOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelFreeBetIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelFreeBetOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIntegratorConfigIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIntegratorConfigOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveParamsIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveParamsOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetParamsIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetParamsOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIntegratorFreeSpinsByIDIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveDefaultWagerInFreeBetValueIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_overlord_overlord_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveDefaultWagerInFreeBetValueOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_overlord_overlord_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_pkg_overlord_overlord_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_pkg_overlord_overlord_proto_msgTypes[32].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_overlord_overlord_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_overlord_overlord_proto_goTypes,
		DependencyIndexes: file_pkg_overlord_overlord_proto_depIdxs,
		MessageInfos:      file_pkg_overlord_overlord_proto_msgTypes,
	}.Build()
	File_pkg_overlord_overlord_proto = out.File
	file_pkg_overlord_overlord_proto_rawDesc = nil
	file_pkg_overlord_overlord_proto_goTypes = nil
	file_pkg_overlord_overlord_proto_depIdxs = nil
}
